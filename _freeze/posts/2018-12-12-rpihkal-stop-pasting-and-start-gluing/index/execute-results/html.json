{
  "hash": "da3971ebf8ffa61ca9c2a10b98188a2e",
  "result": {
    "markdown": "---\ntitle: \"Glue your strings together\"\ndescription: |\n  Use the glue R package to join strings.\ndate: 2018-12-12\ncategories:\n  - data science\n  - R\nbibliography: bibliography.bib\n---\n\n\n\n\nWe've all been there; writing [manuscripts](https://github.com/crsh/papaja) with [R Markdown](https://rmarkdown.rstudio.com/) and dreaming of easy in-text code bits for reproducible reporting. Say you've fit a regression model to your data, and would then like to report the model's parameters in your text, without writing the values in the text. (If the data or model changes, you'd need to re-type the values again.)\n\nFor example, you can print this model summary easily in the R console:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-1_1d55d8b00819b38a1d9b8a2c4eaba991'}\n\n```{.r .cell-code}\nfit <- lm(mpg ~ disp, data = mtcars)\nsummary(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = mpg ~ disp, data = mtcars)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-4.8922 -2.2022 -0.9631  1.6272  7.2305 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 29.599855   1.229720  24.070  < 2e-16 ***\ndisp        -0.041215   0.004712  -8.747 9.38e-10 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.251 on 30 degrees of freedom\nMultiple R-squared:  0.7183,\tAdjusted R-squared:  0.709 \nF-statistic: 76.51 on 1 and 30 DF,  p-value: 9.38e-10\n```\n:::\n:::\n\n\nAnd to cite those values in the text body of your manuscript, you can write the text in R Markdown like this:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-2_b6d07cb8a933e2a8d357be12cdb3788c'}\n\n```{.r .cell-code}\nThe model intercept was `r round(coef(fit)[1], 2)`, great.\n```\n:::\n\n\nWhich would show up in your manuscript like this:\n\nThe model intercept was 29.6, great.\n\n## Paste\n\nHowever, when you want to present more information, such as the parameter estimate with its standard error, you will have to `paste()` those strings together:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-3_366835565a5649d76ca7ecbfddb15497'}\n\n```{.r .cell-code}\n(x <- round(summary(fit)$coefficients, 3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Estimate Std. Error t value Pr(>|t|)\n(Intercept)   29.600      1.230  24.070        0\ndisp          -0.041      0.005  -8.747        0\n```\n:::\n\n```{.r .cell-code}\nintercept <- paste(\"b = \", x[1, 1], \", SE = \", x[1, 2], sep = \"\")\n```\n:::\n\n\nYou can then just cite the `intercept` object in your text body:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-4_22c54f4cec02aea840f6173b9f095127'}\n\n```{.r .cell-code}\nThe model intercept was very very significant (`r intercept`).\n```\n:::\n\n\nWhich would render in your PDF or word document as:\n\nThe model intercept was very very significant (b = 29.6, SE = 1.23).\n\n`paste()` is a base R function, and as such very robust and reproducible--all R installations will have it. However, as such it has a fairly terrible syntax where you have to quote strings, separate strings and variables with commas, etc. This task is made much easier with `glue()`.\n\n## Glue\n\n[glue](https://glue.tidyverse.org/) is a small R package that allows you to join strings together in a neat, pythonific way. It replaces the need for quoting and separating arguments in `paste()`, by asking you to wrap variables in curly braces. Here's how to do the above pasting with glue:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-5_866bccea6b1abb57c9eda7c96862ed47'}\n\n```{.r .cell-code}\nlibrary(glue)\nintercept <- glue(\"b = {x[1, 1]}, SE = {x[1, 2]}\")\n```\n:::\n\n\nWhich gives you the same string as the much messier `paste()` approach: b = 29.6, SE = 1.23\n\n### Glue with data frames\n\nGlue has other neat (more advanced) features, such as gluing variables row-by-row in a data frame:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-6_ef356586f2856edca015da27ea96579b'}\n\n```{.r .cell-code}\nlibrary(dplyr)\nas.data.frame(x) %>% \n  glue_data(\n    \"{rownames(.)}'s point estimate was {Estimate}, with an SE of {`Std. Error`}.\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(Intercept)'s point estimate was 29.6, with an SE of 1.23.\ndisp's point estimate was -0.041, with an SE of 0.005.\n```\n:::\n:::\n\n\n## Appendix: papaja\n\nFor some models (like our simple linear model example here), the [papaja R package](https://github.com/crsh/papaja) (which deserves its own rpihkal post!) has very useful shortcuts\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-7_e5b0a3fe2a4d085c9ce4e216c074a105'}\n\n```{.r .cell-code}\nlibrary(papaja)\nintercept <- apa_print(fit)$estimate$Intercept\n```\n:::\n\n\nIf you now cite `intercept` in the text body of your manuscript, it renders into $\\LaTeX$ (which is interpreted nicely if you are outputting PDF or Word documents; here on this website it looks odd):\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-8_887e8b3d753d5ffa1bf57423ff8600ab'}\n\n```{.r .cell-code}\nThe model intercept was rather significant (`r intercept`).\n```\n:::\n\n\nThe model intercept was rather significant ($b = 29.60$, 95\\% CI $[27.09, 32.11]$).\n\nRead more about glue at <https://glue.tidyverse.org/>.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}