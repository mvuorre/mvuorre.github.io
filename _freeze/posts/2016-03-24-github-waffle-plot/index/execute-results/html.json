{
  "hash": "50452260d507b159942b0d1431fd21c2",
  "result": {
    "markdown": "---\ntitle: GitHub-style waffle plots in R\ndescription: |\n  Attractive visualization for plotting activity over time in R with ggplot2.\ndate: 2016-03-24\ncategories:\n  - R\n  - visualization\n  - data science\n  - tutorial\nimage: \"index_files/figure-html/viz-1.png\"\nbibliography: bibliography.bib\n---\n\n\n\n\n\n\nIn this post, I'll show how to create GitHub style \"waffle\" plot in [R](https://cran.r-project.org/) with the [ggplot2](http://had.co.nz/ggplot2/book) plotting package. We'll use these packages\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/packages_452551d482c384dfdff76b9a6c31664b'}\n\n```{.r .cell-code}\nlibrary(knitr)\nlibrary(tidyverse)\n```\n:::\n\n\n## Simulate activity data\n\nFirst, I'll create a data frame for the simulated data, initializing the data types: \n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/gen_dataframe_bfdb6d241430e7debad4272af38d6405'}\n\n```{.r .cell-code}\nd <- tibble(\n  date = as.Date(1:813, origin = \"2014-01-01\"),\n  year = format(date, \"%Y\"),\n  week = as.integer(format(date, \"%W\")) + 1, # Week starts at 1\n  day = factor(weekdays(date, T),\n    levels = rev(c(\n      \"Mon\", \"Tue\", \"Wed\", \"Thu\",\n      \"Fri\", \"Sat\", \"Sun\"\n    ))\n  ),\n  hours = 0\n)\n```\n:::\n\n\nAnd then simulate hours worked for each date. I'll simulate hours worked separately for weekends and weekdays to make the resulting data a little more realistic, and also simulate missing values to data (that is, days when no work occurred).\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-1_437e0fa30cf8862bebf8f26bdb6b133a'}\n\n```{.r .cell-code}\nset.seed(1)\n# Simulate weekends\nweekends <- filter(d, grepl(\"S(at|un)\", day))\n# Hours worked are (might be) poisson distributed\nweekends$hours <- rpois(nrow(weekends), lambda = 4)\n# Simulate missing days with probability .7\nweekends$na <- rbinom(nrow(weekends), 1, 0.7)\nweekends$hours <- ifelse(weekends$na, NA, weekends$hours)\n\n# Simulate weekdays\nweekdays <- filter(d, !grepl(\"S(at|un)\", day))\nweekdays$hours <- rpois(nrow(weekdays), lambda = 8) # Greater lambda\nweekdays$na <- rbinom(nrow(weekdays), 1, 0.1) # Smaller p(missing)\nweekdays$hours <- ifelse(weekdays$na, NA, weekdays$hours)\n\n# Concatenate weekends and weekdays and arrange by date\nd <- bind_rows(weekends, weekdays) %>%\n  arrange(date) %>% # Arrange by date\n  select(-na) # Remove na column\n```\n:::\n\n\n## Waffle-plot function\n\nThen I'll create a function that draws the waffle plot. If you have similarly structured data, you can copy-paste the function and use it on your data.\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/viz_func_c3c56ab5a6098105a731ca89cb454830'}\n\n```{.r .cell-code}\ngh_waffle <- function(data, pal = \"D\", dir = -1) {\n  p <- ggplot(data, aes(x = week, y = day, fill = hours)) +\n    scale_fill_viridis_c(\n      name = \"Hours\",\n      option = pal, # Variable color palette\n      direction = dir, # Variable color direction\n      na.value = \"grey90\",\n      limits = c(0, max(data$hours))\n    ) +\n    geom_tile(color = \"white\", size = 0.7) +\n    facet_wrap(\"year\", ncol = 1) +\n    scale_x_continuous(\n      expand = c(0, 0),\n      breaks = seq(1, 52, length = 12),\n      labels = c(\n        \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n        \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n      )\n    ) +\n    theme_linedraw(base_family = \"Helvetica\") +\n    theme(\n      axis.title = element_blank(),\n      axis.ticks = element_blank(), \n      axis.text.y = element_text(size = 7),\n      panel.grid = element_blank(),\n      legend.position = \"bottom\",\n      aspect.ratio = 1/7,\n      legend.key.width = unit(1, \"cm\"),\n      strip.text = element_text(hjust = 0.00, face = \"bold\", size = 12)\n    )\n\n  print(p)\n}\n```\n:::\n\n\n### Using the waffle plot function\n\n`gh_waffle()` takes three arguments, the first, `data` is a data frame with columns `date` (type: Date), `year` (number or character), `week` (number), `day` (an ordered factor to make days run from top to bottom on the graph), and `hours` (number). The second option to `gh_waffle()`, `pal` specifies one of four color palettes used by the `viridis` color scale, and can be `\"A\"`, `\"B\"`, `\"C\"`, or `\"D\"`. The default is \"D\", which is also what GitHub uses (or something similar at least). The last option, `dir` specifies the direction of the color scale, and can be either `-1` or `1`. The GitHub default is -1. \n\nUsing `gh_waffle()` with the default settings, only providing the data frame `d`, gives the following result:\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/viz_59bce1585f450aed6c952d85aebe89ba'}\n\n```{.r .cell-code}\ngh_waffle(d)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/viz-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Further reading\n\n* [Faceted heatmaps with ggplot2](http://rud.is/b/2016/02/14/making-faceted-heatmaps-with-ggplot2/) (Inspiration for this post.)\n* [dplyr](https://CRAN.R-project.org/package=dplyr)\n* [ggplot2](http://had.co.nz/ggplot2/book)\n* [viridis](https://github.com/sjmgarnier/viridis)\n* [ggthemes](https://github.com/jrnold/ggthemes)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}