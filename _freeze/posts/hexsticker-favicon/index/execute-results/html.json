{
  "hash": "5b406f0b161d687e153c28695d88637b",
  "result": {
    "markdown": "---\ntitle: Website favicons with hexSticker\ndescription: My journey to make a website favicon with the hexSticker R package\ndate: 2022-06-29\ncategories:\n  - R\nimage: \"index_files/figure-html/fig-favicon-1.png\"\n---\n\n\nMy website needed a new [favicon](https://en.wikipedia.org/wiki/Favicon), and I decided to create one with R. I quite like the look of those hexagonal R package logos, and it turns out there's an R package that helps you make those: [hexSticker](https://github.com/GuangchuangYu/hexSticker).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(hexSticker)\nlibrary(viridis)\nlibrary(here)\nlibrary(tidyverse)\n```\n:::\n\n\nFirst, the design. I really like the simple symmetry of a (normal) density curve. So I based my design on that. To make it a bit more interesting, I decided to stack a small number of them on top of another, each with its own color. Here's how I went about doing that.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A consistent color palette for the image\npalette <- viridis(10)\n\n# Create data for the density curves\nd <- expand_grid(\n    m = 0,\n    s = 1.75,\n    n1 = factor(1:10),\n    x = seq(-5, 5, by = .01)\n  ) %>% \n  mutate(y = dnorm(x, m, s))\n\n# Plot said data\np <- d %>% \n  ggplot(aes(col = n1, group = n1)) +\n  # What's a better / more overused color scale? Nothing.\n  scale_color_viridis_d(begin = .1, end = .9) +\n  # Adjust the empty areas between plot geoms and axis limits\n  scale_y_continuous(\n    expand = expansion(c(.015, .015))\n  ) +\n  # These curves go up\n  geom_line(\n    aes(x = x, y = y),\n    size = .8,\n    position = position_stack()\n  ) +\n  # And these curves go down, but a little less so\n  geom_line(\n    size = .8,\n    aes(x = x, y = -y*.5),\n    position = position_stack()\n  ) +\n  # Make the plot otherwise completely empty\n  theme_void() +\n  theme_transparent() +\n  theme(\n    legend.position = \"none\"\n  )\n```\n:::\n\n\nCan you imagine from above what it'll look like ðŸ˜‰? You'll see in a bit. Next I needed to pass the plot object throught `hexSticker::sticker()` to create the hexagonal sticker plot. There are quite a few arguments to that function and it took me a few minutes to figure out what they do. I basically wanted to fill the hexagonal area with the plot, and add a URL to the corner. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ns <- sticker(\n  p, \n  s_x = 1,\n  s_y = 1,\n  s_width = 1.9,\n  s_height = 1.7,\n  h_fill = \"black\",\n  h_color = palette[3],\n  package = \"\",\n  url = \"sometimesir.com\",\n  u_color = palette[7],\n  u_size = 24,\n  dpi = 800,\n  filename = here(\"favicon.png\")\n  )\nplot(s)\n```\n\n::: {.cell-output-display}\n![Sticker made with ggplot2 and hexSticker.](index_files/figure-html/fig-favicon-1.png){#fig-favicon width=672}\n:::\n:::\n\n\nThe more I kept tweaking this, the more it started to look like a tropical fish swimming towards me. Only the eyes are missing! When printed in RStudio or here in the html output of a rmarkdown/quarto document, the margins are oddly large. But the output file looks just as it should, and is now both the logo (top-left corner) and favicon (browser tab) of this website.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}