---
title: Latent mean centering with brms
description: 'Researchers studying longitudinal data routinely center their predictors to isolate between- and within-cluster contrasts [@endersCenteringPredictorVariables2007]. This within-cluster centering is usually an easy data-manipulation step. However, centering variables on the observed means can bias the resulting estimates, a problem that is avoided with latent mean centering. In this entry, we study how to latent-mean-center variables in multilevel models using brms.'
date: 2023-01-01
categories:
  - R
  - modelling
  - bayes
  - centering
  - longitudinal
  - brms
reference-location: margin
knitr:
  opts_chunk: 
    message: false
    warning: false
format:
  html:
    code-fold: true
    code-summary: "Code"
    code-overflow: wrap
    from: markdown+emoji
image: ""
draft: false
bibliography: references.bib
---

```{r setup}
#| results: 'hide'
# Packages
library(knitr)
library(brms)
library(ggthemes)
library(scales)
library(kableExtra)
library(posterior)
library(tidyverse)

# Options for sampling
options(
  brms.backend = "cmdstanr",
  mc.cores = parallel::detectCores(logical = FALSE)
  )

# Function for tables
k2 <- function(x, escape = TRUE) {
  x %>% 
    kbl(digits = 2, escape = escape) %>% 
    kable_classic_2("striped", full_width = FALSE, html_font = "Arial")
}

# Plotting theme
theme_set(
  theme_few() +
  theme(
    axis.title.y = element_blank(),
    legend.title = element_blank(), 
    panel.grid.major = element_line(linetype = "dotted", linewidth = .1),
    legend.position = "bottom", 
    legend.justification = "left"
  )
)

# Download and uncompress McNeish and Hamaker materials if not yet done
path <- "materials/materials.zip"
if (!file.exists(path)) {
  dir.create("materials", showWarnings = FALSE)
  download.file(
    "https://files.osf.io/v1/resources/wuprx/providers/osfstorage/5bfc839601593f0016774697/?zip=",
    destfile = path
  )
  unzip(path, exdir = "materials")
}
```

:::{.callout-warning}
I am currently studying this model implementation in more detail. It seems that there are some pieces missing, and results regarding some parameters seem unreliable. So **if you want to use this in your own work, please ensure appropriate model performance with a parameter recovery simulation.** Take everything below with a grain of salt. I'll update here once I learn more about this model's performance.
:::

:::{.callout-note}
While drafting this entry, I asked for help with coding this up in brms on the Stan forums: <https://discourse.mc-stan.org/t/latent-mean-centering-latent-covariate-models-in-brms/29424>. I couldn't have figured it out without the help of all those people who answered. Thanks!

The earlier drafts and mistakes I made in coding the brms model up can be found in the [Git history](https://github.com/mvuorre/mvuorre.github.io/commits/main/posts/stan-latent-mean-centering/index.qmd) of this file :smile:
:::

# Introduction

Within cluster centering, or *person-mean centering* (psychologists' clusters are typically persons), is an easy but essential data processing step. For example consider the example data of 100 people's ratings of urge to smoke and depression, collected over 50 days with one response per day [@mcneishPrimerTwolevelDynamic2020] [^1], shown in @tbl-data and @fig-data.

[^1]: Grab a free copy at <https://osf.io/j56bm/download>. I couldn't figure if this example data is real or simulated, or what the measurement instruments were.

```{r}
d <- read_csv(
  "materials/Data/Two-Level Data.csv", 
  col_names = c("urge", "dep", "js", "hs", "person", "time")
) %>% 
  select(-hs, -js) %>% 
  relocate(person, time, 1)

d <- d %>% 
  # Grand mean center both variables
  mutate(across(c(urge, dep), list(c = ~ . - mean(.)))) %>% 
  group_by(person) %>% 
  mutate(
    across(
      c(urge_c, dep_c), 
      list(
        # Between-person center (= person's mean)
        b = ~ mean(.), 
        # Within-person center (= deviation from person's mean)
        w = ~ . - mean(.)
      ),
      .names = "{.col}{.fn}"
    )
  ) %>% 
  ungroup()
```


```{r}
#| label: tbl-data
#| echo: false
#| tbl-cap: Example longitudinal data (McNeish & Hamaker, 2020)
d %>% 
  slice(1:5, 51:55) %>% 
  k2() %>% 
  footnote(
    "Only displaying two participants' first five observations. _c: grand mean centered; _cb: between-person centered (ie. person mean); _cw: within-person centered.", 
    footnote_as_chunk = TRUE
  )
```

The first four variables in @tbl-data are the original data values, indicating the person and timepoint of measurement, urge to smoke, and depression. I've then created the grand-mean, between-person, and within-person variables by simple data transformations. Between-person centered variables are person-specific means, and within-person centered variables are deviations around that person's mean.

```{r}
#| label: fig-data
#| fig-cap: Four persons' depression and urge to smoke over time
#| fig-height: 2.8

set.seed(999)
d %>% 
  filter(person %in% sample(1:100, 4)) %>% 
  select(1:4) %>% 
  pivot_longer(urge:dep) %>% 
  rename(Time = time) %>% 
  mutate(name = factor(name, labels = c("Depression", "Urge"))) %>% 
  ggplot(aes(Time, value, col = name)) +
  geom_line(linewidth = .5) +
  facet_wrap("person", nrow = 1, labeller = label_both)
```

However, the person-mean is an unknown quantity, and centering on the observed value rather than an estimate of the true "latent" quantity can be problematic. Specifically, observed mean centering leads to Nickell's (negative bias in autoregressive effects) and LÃ¼dtke's (bias in other time-varying effects) biases [@mcneishPrimerTwolevelDynamic2020, p. 617-618]. Essentially these problems arise from not considering that the person means are unobserved, latent quantities, but instead treating them as values known without uncertainty.

So, what to do? McNeish and Hamaker [-@mcneishPrimerTwolevelDynamic2020] and others discuss latent mean centering, which accounts for uncertainty in the person-means appropriately, and thus debiases the estimated coefficients. Latent mean centering is done inside the model, and means treating the means as estimated parameters. However, I have only been able to find examples that do this latent mean centering in MPlus, such as [@mcneishPrimerTwolevelDynamic2020]. Therefore my goal here is to reproduce their model with the free and open source software [Stan](https://mc-stan.org) front-end [brms](https://paul-buerkner.github.io/brms/).

# Single-level AR(1) model

To begin with, we replicate the authors' basic N=1 model predicting the urge to smoke from the urge to smoke on a previous measurement occasion, and the current level of depression. Because we are modelling one person's data only, there is no need for centering, but this model serves as a useful starting point for our quest.

Following [@mcneishPrimerTwolevelDynamic2020], we assume that Urge at time $t$ is normally distributed around a mean $\mu_t$ with standard deviation $\sigma$. We then model the mean on an intercept, on Urge at the previous measurement occasion, and on the current level of depression^[I've used the more common $\phi$ (phi) throughout than the $\varphi$ used by M&P]:

$$\begin{align*}
\text{Urge}_{t} &\sim N(\mu_{t}, \sigma^2), \\
\mu_{t} &= \alpha + \phi\text{Urge}_{(t-1)} + \beta\text{Dep}_{t}
\end{align*}$$ {#eq-n1}

This is straightforward. We first create a lagged urge variable, and then fit the model. Notice though that this will lead to one missing data point because the first value doesn't have a lagged value. We confirm that our estimates are in line with those reported in the paper

```{r}
#| code-fold: show
# Estimate model
fit_p5 <- brm(
  urge ~ urge1 + dep,
  family = gaussian(),
  data = d %>% 
    # Pick one individual (same as used in M&H2020)
    filter(person == 5) %>% 
    # Create lagged urge
    mutate(urge1 = lag(urge)),
  file = "fit_p5"
)
```


```{r}
# Show table of coefficients' posterior summaries
as_draws_df(fit_p5) %>% 
  select(1:4) %>% 
  mutate(sigma_sq = sigma^2, .keep = "unused") %>% 
  summarise_draws(median, ~quantile2(., probs = c(.025, .975))) %>% 
  mutate(
    variable = str_c(
      variable, 
      c(" ($\\alpha$)", " ($\\phi$)", " ($\\beta$)", " ($\\sigma^2$)")
    ),
    across(c(median, q2.5, q97.5), ~number(., .01)),
    `Result (brms)` = str_glue("{median} [{q2.5}, {q97.5}]"),
    Authors = c(
      "0.07 [-0.24, 0.39]", 
      "0.35 [0.25, 0.46]", 
      "2.43 [2.12, 2.75]", 
      "1.36 [0.92, 2.20]"
    )
  ) %>% 
  select(-c(median:q97.5)) %>% 
  k2(escape = FALSE) %>% 
  footnote("I've no idea how to render the math here, SRY", footnote_as_chunk = TRUE)
```

# Multilevel AR(1) model {#multilevel-ar1-model}

Above, we modelled a single person's urge to smoke on their previous urge to smoke and current depression. Here, we attempt to model 100 individuals' data in a single multilevel model. Before worrying about latent mean centering, we can estimate this model using the observed mean centered values shown in Table @tbl-data. The authors' model of these data is

$$\begin{align*}
\text{Urge}_{ti} &\sim N(\mu_{ti}, \sigma^2), \\
\mu_{ti} &= \bar{\alpha} + \alpha_i + (\bar{\phi}+\phi_i)\text{Urge}^c_{(t-1)i} + (\bar{\beta} + \beta_i)\text{Dep}^c_{ti}, \\
(\alpha_i, \phi_i, \beta_i) &\sim MVN(\pmb{0}, \Sigma),
\end{align*}$$ {#eq-ml}

where we now have a subscript $i$ for participants, parameters with bars (population-level) and without (person-specific, with subscripts $i$), and the variance-covariance matrix for the latter, where all covariances are set to zero as in [@mcneishPrimerTwolevelDynamic2020]. Notice that the the subscripted parameters are deviations with a mean of zero, so we can talk about e.g. $\bar{\alpha} + \alpha_2$ as person 2's intercept. $\text{Urge}^c_{(t-1)i}$ and $\text{Dep}^c_{ti}$ are the within-person centered values of urge to smoke on the previous timepoint and depression, respectively (`_cw` values in Table @tbl-data.) We can fit this model with brms with a small modification of the previous model

```{r}
#| code-fold: show
# Create lagged variable
d <- d %>% 
  group_by(person) %>% 
  mutate(
    urge1 = lag(urge),
    urge_cw1 = lag(urge_cw)
    ) %>% 
  ungroup()

# Estimate model
fit_observed <- brm(
  urge ~ urge_cw1 + dep_cw + (urge_cw1 + dep_cw || person),
  family = gaussian(),
  data = d,
  cores = 8, chains = 4, threads = 2,
  file = "brm-fit-observed-mean-centered"
)
```

We now estimated the model using observed person mean centering. These estimates are very close to the ones reported in authors' Table 4, because there are so many observations per person. (Note this is probably not the best example because of this, and also because I don't really know what the data are from the paper). Importantly, we have not estimated the latent depression variable, so that is missing

```{r}
# Show table of coefficients' posterior summaries
as_draws_df(fit_observed) %>% 
  select(1:7) %>% 
  mutate(
    across(c(starts_with("sd_"), "sigma"), ~.^2)
  ) %>% 
  # mutate(sigma_sq = sigma^2, .keep = "unused") %>% 
  summarise_draws(median, ~quantile2(., probs = c(.025, .975))) %>% 
  mutate(
    variable = str_c(
      variable, 
      c(" ($\\alpha$)", " ($\\phi$)", " ($\\beta$)",
        " ($\\sigma^2_{\\alpha}$)", " ($\\sigma^2_{\\phi)}$", 
        " ($\\sigma^2_{\\beta})$", " ($\\sigma^2$)")
      ),
    across(c(median, q2.5, q97.5), ~number(., .01)),
    `Result (brms)` = str_glue("{median} [{q2.5}, {q97.5}]"),
    Authors = c(
      "-0.01 [-0.18, 0.16]",
      " 0.21 [0.17, 0.24]",
      " 0.80 [0.61, 0.95]",
      " 0.60 [0.44, 0.83]",
      " 0.02 [0.01, 0.03]",
      " 0.79 [0.61, 0.95]",
      " 1.14 [1.09, 1.19]"
    )
  ) %>% 
  select(-c(median:q97.5)) %>% 
  k2()
```

The problem then boils down to figuring out how to get the quantities $\text{Urge}^c_{(t-1)i}$ and $\text{Dep}^c_{ti}$. Usually, we calculate them from data as deviations from the person's observed mean, like we did above in Table 1. However, here' we want to use latent-mean centering:

$$\begin{align*}
\text{Urge}^n_{(t-1)i} &= \text{Urge}^c_{(t-1)i} + \text{Urge}^b_i, \\
\text{Dep}^n_{ti} &= \text{Dep}^c_{ti} + \text{Dep}^b_i
\end{align*}$$ {#eq-lmc}

## brms

It turns out that specifying this model with latent mean centering is fairly straightforward with brms. First, we will need to specify a non-linear formula where we name all parameters, and then another one that specifies that one of the predictors is a parameter too. Thanks to Mauricio Garnier-Villarreal, Ethan McCormick, Simon Brauer, Joran Jongerling, and others who helped out with my Stan discourse [question](https://discourse.mc-stan.org/t/latent-mean-centering-latent-covariate-models-in-brms/29424) to figure out the syntax!

Here goes. We specify a formula of `urge` on the named parameters and predictors, as you do with brms' [nonlinear formulas](https://cran.r-project.org/web/packages/brms/vignettes/brms_nonlinear.html). Then in the subsequent lines, each parameter is specified their own model. The trick is to predict the latent means inside another `nlf()`, and then the predictor there in another model formula. That's it! And because this is a nonlinear formula, we need to assign some priors.

```{r}
#| code-fold: show
latent_formula <- bf(
  urge ~ alpha + phi*(urge1 - alpha) + beta*(dep - depb),
  alpha ~ 1 + (1 | person),
  phi ~ 1 + (1 | person),
  beta ~ 1 + (1 | person),
  nlf(depb ~ depCB),
  depCB ~ 1 + (1 | person),
  nl = TRUE
) +
  gaussian()

p <- get_prior(latent_formula, data = d) %>%
  mutate(
    prior = case_when(
      class == "b" & coef == "Intercept" ~ "normal(0, 1)",
      class == "sd" & coef == "Intercept" ~ "student_t(7, 0, 1)",
      TRUE ~ prior
    )
  )

fit_latent <- brm(
  latent_formula,
  data = d,
  prior = p,
  cores = 8, chains = 4, threads = 2,
  control = list(adapt_delta = 0.99),
  file = "brm-fit-latent-mean-centered"
)
```

We can then compare our parameters' posteriors to those in McNeish and Hamaker:

```{r}
as_draws_df(fit_latent) %>% 
  select(1:9) %>% 
  mutate(
    across(c(starts_with("sd_"), "sigma"), ~.^2)
  ) %>% 
  summarise_draws(median, ~quantile2(., probs = c(.025, .975))) %>% 
  mutate(variable = str_replace(variable, "sd_person__", "var_")) %>% 
  mutate(
    variable = str_c(
      variable, 
      c(" ($\\alpha$)", " ($\\phi$)", " ($\\beta$)", " (DepB)",
        " ($\\sigma^2_{\\alpha}$)", " ($\\sigma^2_{\\phi)}$", 
        " ($\\sigma^2_{\\beta})$", " ($\\sigma^2_{DepB})$",
        " ($\\sigma^2$)")
      ),
    across(c(median, q2.5, q97.5), ~number(., .01)),
    `Result (brms)` = str_glue("{median} [{q2.5}, {q97.5}]"),
    Authors = c(
      "-0.01 [-0.18, 0.16]",
      " 0.21 [0.17, 0.24]",
      " 0.80 [0.61, 0.95]",
      " 0.01 [-0.02, 0.04]",
      " 0.60 [0.44, 0.83]",
      " 0.02 [0.01, 0.03]",
      " 0.79 [0.61, 0.95]",
      " 0.01 [0.00, 0.01]",
      " 1.14 [1.09, 1.19]"
    )
  ) %>% 
  select(-c(median:q97.5)) %>% 
  k2(escape = FALSE)
```

Looking carefully, there is some small difference in the intercepts of urge and mean depression. Their variances, however, are identical to M&H. I think this might have something to do with how MPlus / brms works and how the priors are specified, so I am not worried about that. Or maybe with how the lagged variable is treated.

# Conclusion

Because it is this easy to specify latent means in brms, I think I will be using them much more often from now on, especially if my sample size per person is small. I don't think this will make much of a difference after that sample size is greater than, say, the magic number 30.

Let me know if you have any comments!

# See also {.appendix}

I've found these prior discussions useful

-   <https://quantscience.rbind.io/2020/02/04/bayesian-mlm-with-group-mean-centering/#group-mean-centering-treating-group-means-as-latent-variables>
-   <https://discourse.mc-stan.org/t/treat-the-cluster-mean-of-a-predictor-variable-as-a-latent-variable-hierarchical-linear-models/15001/5>
-   <https://discourse.mc-stan.org/t/modeling-latent-means-in-brms-for-multilevel-group-mean-centering/12642/3>
-   <https://scottclaessens.github.io/blog/2020/brmsLV/>
-   <https://discourse.mc-stan.org/t/mi-with-non-linear-model/11227>
