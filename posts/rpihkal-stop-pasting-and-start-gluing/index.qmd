---
title: "Glue your strings together"
description: |
  Use the glue R package to join strings.
date: 2018-12-12
categories:
  - data science
  - R
bibliography: bibliography.bib
aliases:
  - /posts/2018-12-12-rpihkal-stop-pasting-and-start-gluing/index.html
---

```{r setup, include = FALSE}
library(knitr)
library(tidyverse)
opts_chunk$set(warning = F, message = F, eval = T, cache = T)
theme_set(theme_linedraw() + theme(panel.grid = element_blank()))
```

We've all been there; writing [manuscripts](https://github.com/crsh/papaja) with [R Markdown](https://rmarkdown.rstudio.com/) and dreaming of easy in-text code bits for reproducible reporting. Say you've fit a regression model to your data, and would then like to report the model's parameters in your text, without writing the values in the text. (If the data or model changes, you'd need to re-type the values again.)

For example, you can print this model summary easily in the R console:

```{r}
fit <- lm(mpg ~ disp, data = mtcars)
summary(fit)
```

And to cite those values in the text body of your manuscript, you can write the text in R Markdown like this:

```{r, eval = FALSE}
The model intercept was `r round(coef(fit)[1], 2)`, great.
```

Which would show up in your manuscript like this:

The model intercept was `r round(coef(fit)[1], 2)`, great.

## Paste

However, when you want to present more information, such as the parameter estimate with its standard error, you will have to `paste()` those strings together:

```{r}
(x <- round(summary(fit)$coefficients, 3))
intercept <- paste("b = ", x[1, 1], ", SE = ", x[1, 2], sep = "")
```

You can then just cite the `intercept` object in your text body:

```{r, eval = FALSE}
The model intercept was very very significant (`r intercept`).
```

Which would render in your PDF or word document as:

The model intercept was very very significant (`r intercept`).

`paste()` is a base R function, and as such very robust and reproducible--all R installations will have it. However, as such it has a fairly terrible syntax where you have to quote strings, separate strings and variables with commas, etc. This task is made much easier with `glue()`.

## Glue

[glue](https://glue.tidyverse.org/) is a small R package that allows you to join strings together in a neat, pythonific way. It replaces the need for quoting and separating arguments in `paste()`, by asking you to wrap variables in curly braces. Here's how to do the above pasting with glue:

```{r}
library(glue)
intercept <- glue("b = {x[1, 1]}, SE = {x[1, 2]}")
```

Which gives you the same string as the much messier `paste()` approach: `r intercept`

### Glue with data frames

Glue has other neat (more advanced) features, such as gluing variables row-by-row in a data frame:

```{r}
library(dplyr)
as.data.frame(x) %>%
  glue_data(
    "{rownames(.)}'s point estimate was {Estimate}, with an SE of {`Std. Error`}."
  )
```

Read more about glue at <https://glue.tidyverse.org/>.
