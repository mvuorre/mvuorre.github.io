{
  "hash": "d586bfa91a3f3378c5633bb573156558",
  "result": {
    "markdown": "---\ntitle: Tidymultiverse\ndescription: How to conduct multiverse analyses in R in parallel with tidy pipelines\ndate: 2022-11-30\ncategories:\n  - R\n  - multiverse\n  - tidyverse\n  - specr\ndraft: false\nexecute:\n  cache: true\n  message: false\n  warning: false\nfrom: markdown+emoji\nreference-location: margin\nexecute-dir: file\nformat:\n  html:\n    code-fold: show\n    code-summary: \"Code\"\n    df-print: kable\nbibliography: references.bib\nimage: \"images/undraw-lost-online.png\"\n---\n\n\n# Introduction\n\n:::{.callout-note}\n## Work in progress\nThis entry is an unfinished draft.\n:::\n\nThe results of statistical analyses often depend on analysts' (sometimes arbitrary) decisions, such as which covariates to model or what subsets of data to analyse. Multiverse (sometimes called specification curve) analysis is a method whereby the analysts don't only conduct and report the results from one model, but instead conduct all the relevant and plausible analyses and report all the results [@simonsohnSpecificationCurveAnalysis2020; @steegenIncreasingTransparencyMultiverse2016].\n\nFor example, @orbenAssociationAdolescentWellbeing2019 showed, through analyzing the same datasets in thousands of different ways, that conclusions regarding the association between the psychological well-being of adolescents and their digital technology use critically depend on (mostly) arbitrary decisions in how and which data are analysed (@fig-op3).\n\nThis blog entry is about the technical aspects of conducting multiverse analyses in R. I have briefly examined the landscape of R packages that facilitate multiverse analyses, and found that none suited my needs. In this entry, I outline a general and flexible [tidyverse](https://www.tidyverse.org/)-centric multiverse analysis pipeline. I eschew using external packages to maximize flexibility and speed (parallel processing).\n\n\n::: {.cell hash='index_cache/html/fig-op3_8c7e2c07d79e14f6ec7bc1622363ce63'}\n::: {.cell-output-display}\n![Figure 3 from @orbenAssociationAdolescentWellbeing2019. Reproduced 100% without permission, but I don't think Amy or Andy would mind.](images/orben-przybylski-2019-fig3.png){#fig-op3}\n:::\n:::\n\n\nCurrently, I am aware of three R packages for conducting multiverse analyses. The [multiverse](https://github.com/MUCollective/multiverse/) package provides extensive functionality for conducting and reporting multiverse analyses, including a \"domain specific language\" for analyses and reporting. However, while powerful, the package seems somewhat complicated (for the use cases that I have in mind). Frankly, after briefly reviewing the documentation, I don't know how to use it (but it seems cool!) [mverse](https://github.com/mverseanalysis/mverse/) aims to make the multiverse package easier to use. I haven't explored it much but it only seems to offer `lm()` and `glm()` models. [specr](https://github.com/masurp/specr) (maybe most relevant for my use cases in psychology) provides a much simpler set of functions (with less flexibility, however). \n\nAnother downside of these packages is that they don't provide options for parallel computations. Parallelization is quite important because multiverse analyses can include (tens, hundreds) of thousands of analyses and can therefore take a long time to complete. I started a pull request that aimed to add that functionality to specr, but along the way found that it wasn't so easy to implement with the current specr syntax and codebase, and my limited R skills.\n\nWhile thinking about how best to contribute to specr, I realized that multiverse analyses don't necessarily need extra functions, but can be easily implemented in familiar data analysis pipelines ([dplyr](https://dplyr.tidyverse.org/) and `%>%`; depending on how familiar you are with the tidyverse). This entry is part of my journey of trying to figure out how to flexibly conduct multiverse analyses in parallel in R, and demonstrates a flexible syntax for parallelizing multiverse analyses with `%>%`lines.\n\nI am not an expert in parallel processing by any means, so would love to know if you have any feedback on how I've implemented it below! Let me know in the comments :smile:\n\n# Example multiverse analysis\n\nLet’s start with a simple toy example with two outcomes, two predictors, and two covariates, and no prior reason to choose between specifications. That is, we think that `y1` and `y2` are equally likely to represent our outcome construct of interest, `x1` and `x2` are equally likely to represent the predictor construct, and we can’t choose if or how to include the covariates `c1` and `c2` in the model. Let's load the required libraries and show the example data (@tbl-data):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(kableExtra)\nlibrary(scales)\nlibrary(ggthemes)\nlibrary(tictoc)\nlibrary(tidyverse)\n\ntheme_set(\n  theme_few(\n    base_family = \"Comic Sans MS\", \n    base_size = 12\n  )\n)\n\nk2 <- function(x) {\n  x %>% \n    kbl(digits = 2) %>% \n    kable_classic_2(html_font = \"Arial\", lightable_options = \"striped\", full_width = FALSE)\n}\n\n# Data generation\ngenerate_data <- function(seed = NA, n = 1e5) {\n  if (!is.na(seed)) set.seed(seed)\n  dat <- tibble(\n    x1 = rnorm(n),\n    x2 = rnorm(n),\n    y1 = rnorm(n) + x1*.1,\n    y2 = rnorm(n) + x1*.2,\n    c1 = rnorm(n) + x1*.3,\n    c2 = rnorm(n),\n    group = sample(c(\"a\", \"b\", \"c\", \"d\"), n, replace = TRUE)\n  )\n}\ndat <- generate_data(9)\n```\n:::\n\n::: {#tbl-data .cell tbl-cap='Example data (n = 100,000; 5.3 Mb on disk)' hash='index_cache/html/tbl-data_81ef40ee3969285b1a2f2aa6103198c2'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic-2 lightable-striped\" style=\"font-family: Arial; width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> x1 </th>\n   <th style=\"text-align:right;\"> x2 </th>\n   <th style=\"text-align:right;\"> y1 </th>\n   <th style=\"text-align:right;\"> y2 </th>\n   <th style=\"text-align:right;\"> c1 </th>\n   <th style=\"text-align:right;\"> c2 </th>\n   <th style=\"text-align:left;\"> group </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> -0.77 </td>\n   <td style=\"text-align:right;\"> 1.10 </td>\n   <td style=\"text-align:right;\"> -0.36 </td>\n   <td style=\"text-align:right;\"> -1.23 </td>\n   <td style=\"text-align:right;\"> 0.78 </td>\n   <td style=\"text-align:right;\"> -0.77 </td>\n   <td style=\"text-align:left;\"> d </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> -0.82 </td>\n   <td style=\"text-align:right;\"> -1.68 </td>\n   <td style=\"text-align:right;\"> -0.50 </td>\n   <td style=\"text-align:right;\"> -0.79 </td>\n   <td style=\"text-align:right;\"> -1.08 </td>\n   <td style=\"text-align:right;\"> -0.81 </td>\n   <td style=\"text-align:left;\"> b </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> -0.14 </td>\n   <td style=\"text-align:right;\"> -1.89 </td>\n   <td style=\"text-align:right;\"> -0.67 </td>\n   <td style=\"text-align:right;\"> 0.71 </td>\n   <td style=\"text-align:right;\"> -0.89 </td>\n   <td style=\"text-align:right;\"> -0.66 </td>\n   <td style=\"text-align:left;\"> b </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> -0.28 </td>\n   <td style=\"text-align:right;\"> -0.98 </td>\n   <td style=\"text-align:right;\"> 0.68 </td>\n   <td style=\"text-align:right;\"> -1.40 </td>\n   <td style=\"text-align:right;\"> 1.24 </td>\n   <td style=\"text-align:right;\"> -0.25 </td>\n   <td style=\"text-align:left;\"> c </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 0.44 </td>\n   <td style=\"text-align:right;\"> -0.10 </td>\n   <td style=\"text-align:right;\"> 0.83 </td>\n   <td style=\"text-align:right;\"> 0.11 </td>\n   <td style=\"text-align:right;\"> -0.78 </td>\n   <td style=\"text-align:right;\"> -0.45 </td>\n   <td style=\"text-align:left;\"> d </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> -1.19 </td>\n   <td style=\"text-align:right;\"> -0.54 </td>\n   <td style=\"text-align:right;\"> -0.38 </td>\n   <td style=\"text-align:right;\"> 2.10 </td>\n   <td style=\"text-align:right;\"> 1.42 </td>\n   <td style=\"text-align:right;\"> 1.11 </td>\n   <td style=\"text-align:left;\"> b </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nWe can specify a fully crossed multiverse analysis over outcomes, predictors, and covariates, easily with specr. Also, to make the example a bit more interesting for later examples, I'll estimate the model using two functions (`lm()` and `glm()` which in this case give the same results), and will time the function call using tictoc. @tbl-specr shows the first few rows of the results.\n\n\n::: {.cell hash='index_cache/html/specr_b0f58f39187fbb67b7dcbb5e8e31587f'}\n\n```{.r .cell-code}\nlibrary(specr)\ntic()\nresults_specr <- run_specs(\n  df = dat, \n  y = c(\"y1\", \"y2\"), \n  x = c(\"x1\", \"x2\"), \n  model = c(\"lm\", \"glm\"), \n  controls = c(\"c1\", \"c2\"), \n  subsets = list(group = unique(dat$group))\n)\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n28.683 sec elapsed\n```\n:::\n:::\n\n::: {#tbl-specr .cell tbl-cap='First six rows of multiverse numerical results from specr' hash='index_cache/html/tbl-specr_44b0265afaa1b420f782ec9a52605473'}\n\n```{.r .cell-code  code-fold=\"true\"}\nresults_specr %>% \n  head() %>% \n  .[,1:10] %>% \n  kbl(\n    digits = 2\n  ) %>% \n  kable_classic_2(html_font = \"Arial\", full_width = FALSE)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic-2\" style=\"font-family: Arial; width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> x </th>\n   <th style=\"text-align:left;\"> y </th>\n   <th style=\"text-align:left;\"> model </th>\n   <th style=\"text-align:left;\"> controls </th>\n   <th style=\"text-align:right;\"> estimate </th>\n   <th style=\"text-align:right;\"> std.error </th>\n   <th style=\"text-align:right;\"> statistic </th>\n   <th style=\"text-align:right;\"> p.value </th>\n   <th style=\"text-align:right;\"> conf.low </th>\n   <th style=\"text-align:right;\"> conf.high </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> y1 </td>\n   <td style=\"text-align:left;\"> lm </td>\n   <td style=\"text-align:left;\"> c1 + c2 </td>\n   <td style=\"text-align:right;\"> 0.09 </td>\n   <td style=\"text-align:right;\"> 0.01 </td>\n   <td style=\"text-align:right;\"> 13.96 </td>\n   <td style=\"text-align:right;\"> 0.00 </td>\n   <td style=\"text-align:right;\"> 0.08 </td>\n   <td style=\"text-align:right;\"> 0.11 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x2 </td>\n   <td style=\"text-align:left;\"> y1 </td>\n   <td style=\"text-align:left;\"> lm </td>\n   <td style=\"text-align:left;\"> c1 + c2 </td>\n   <td style=\"text-align:right;\"> 0.00 </td>\n   <td style=\"text-align:right;\"> 0.01 </td>\n   <td style=\"text-align:right;\"> 0.48 </td>\n   <td style=\"text-align:right;\"> 0.63 </td>\n   <td style=\"text-align:right;\"> -0.01 </td>\n   <td style=\"text-align:right;\"> 0.02 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> y2 </td>\n   <td style=\"text-align:left;\"> lm </td>\n   <td style=\"text-align:left;\"> c1 + c2 </td>\n   <td style=\"text-align:right;\"> 0.20 </td>\n   <td style=\"text-align:right;\"> 0.01 </td>\n   <td style=\"text-align:right;\"> 29.79 </td>\n   <td style=\"text-align:right;\"> 0.00 </td>\n   <td style=\"text-align:right;\"> 0.18 </td>\n   <td style=\"text-align:right;\"> 0.21 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x2 </td>\n   <td style=\"text-align:left;\"> y2 </td>\n   <td style=\"text-align:left;\"> lm </td>\n   <td style=\"text-align:left;\"> c1 + c2 </td>\n   <td style=\"text-align:right;\"> 0.01 </td>\n   <td style=\"text-align:right;\"> 0.01 </td>\n   <td style=\"text-align:right;\"> 0.79 </td>\n   <td style=\"text-align:right;\"> 0.43 </td>\n   <td style=\"text-align:right;\"> -0.01 </td>\n   <td style=\"text-align:right;\"> 0.02 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> y1 </td>\n   <td style=\"text-align:left;\"> glm </td>\n   <td style=\"text-align:left;\"> c1 + c2 </td>\n   <td style=\"text-align:right;\"> 0.09 </td>\n   <td style=\"text-align:right;\"> 0.01 </td>\n   <td style=\"text-align:right;\"> 13.96 </td>\n   <td style=\"text-align:right;\"> 0.00 </td>\n   <td style=\"text-align:right;\"> 0.08 </td>\n   <td style=\"text-align:right;\"> 0.11 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x2 </td>\n   <td style=\"text-align:left;\"> y1 </td>\n   <td style=\"text-align:left;\"> glm </td>\n   <td style=\"text-align:left;\"> c1 + c2 </td>\n   <td style=\"text-align:right;\"> 0.00 </td>\n   <td style=\"text-align:right;\"> 0.01 </td>\n   <td style=\"text-align:right;\"> 0.48 </td>\n   <td style=\"text-align:right;\"> 0.63 </td>\n   <td style=\"text-align:right;\"> -0.01 </td>\n   <td style=\"text-align:right;\"> 0.02 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nAnother great thing about this package is that you can easily draw specification curve figures (@fig-specr)\n\n\n::: {.cell hash='index_cache/html/fig-specr_617539ff4398e57bcb4bff2078677e43'}\n\n```{.r .cell-code}\nplot_specs(\n  results_specr, \n  choices = c(\"x\", \"y\", \"model\", \"controls\", \"subsets\")\n)\n```\n\n::: {.cell-output-display}\n![Specification curve figure drawn from specr results](index_files/figure-html/fig-specr-1.png){#fig-specr width=672}\n:::\n:::\n\n\nHowever, even with this modest data set and 160 specifications, this took a while.\n\nI first decided to take a stab at parallelizing `run_specs()`. This turned out to be a bit of a dead end because I couldn't make the parallelization fit in with how [`run_specs()`](https://github.com/masurp/specr/blob/master/R/run_specs.r) works in the back-end.[^1] So instead of shoehorning a parallel back-end to specr, I decided to implement the parallelization in a tidy pipeline. This pipeline, with no additional dependencies (apart from the tidyverse!), works pretty well. It of course does not provide specr's one-liners, but I believe the flexibility of this approach pays back for it.\n\n[^1]: It first creates a data frame with the specs, then the requested subsets, and then either applies `run_spec()` to all the datasets and specs using `map()`, or if no subsets were requested, runs the `run_spec()` on the specs only. So it wasn't straightforward to parallelize over both data subsets and specs. Parallelizing over specs [was simple](https://github.com/masurp/specr/pull/31/commits/142bdf879b96966b3f4bd1fdf04e886711d827f1).\n\n# Tidymultiverse\n\n## Specification table\n\nThe first step in a multiverse analysis is defining the grid of specifications.\n\nThe one difficulty here is that the dataset can also be part of the specifications (e.g. different outlier removal thresholds), but you can't include the dataset in the table of specifications, because it would easily get too large and your computer would run out of memory (I learned this the hard way). So we will still iterate over the specs table, and pull relevant subsets of the data from the source data table in the function that iterates over the specs.\n\nA flexible and easy way to declare the specifications is `expand_grid()`. This allows us to create tables that cross all the variables declared therein. I've chosen here to create a grid of variables.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-7_36964913f4bba4a690d472f716503c50'}\n\n```{.r .cell-code}\nspecs <- expand_grid(\n  x = c(\"x1\", \"x2\"),\n  y = c(\"y1\", \"y2\"),\n  covariate = c(\"x1\", \"x2\"),\n  model = c(\"lm\", \"glm\")\n)\n```\n:::\n\n::: {#tbl-specs-1 .cell tbl-cap='First six rows of example specifications table.' hash='index_cache/html/tbl-specs-1_46ac03da110c57ab2b1fc643b55ba679'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic-2 lightable-striped\" style=\"font-family: Arial; width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> x </th>\n   <th style=\"text-align:left;\"> y </th>\n   <th style=\"text-align:left;\"> covariate </th>\n   <th style=\"text-align:left;\"> model </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> y1 </td>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> lm </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> y1 </td>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> glm </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> y1 </td>\n   <td style=\"text-align:left;\"> x2 </td>\n   <td style=\"text-align:left;\"> lm </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> y1 </td>\n   <td style=\"text-align:left;\"> x2 </td>\n   <td style=\"text-align:left;\"> glm </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> y2 </td>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> lm </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> y2 </td>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> glm </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nBut we could also just as well create a grid of formulas. Depending on your analysis, this might be a viable option\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-9_3897713cd6b8874a6d5aa3076331c794'}\n\n```{.r .cell-code}\nexpand_grid(\n  formula = c(\"y1 ~ x1\", \"y1 ~ x2\", \"y1 ~ x1 + c1\"), # And so on\n  model = c(\"lm\", \"glm\")\n)\n```\n:::\n\n\nWe will stick with specifying variables instead, for this example. We can include subgroups as well:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-10_f100595467f826154248c233050c6023'}\n\n```{.r .cell-code}\nspecs <- expand_grid(\n  x = c(\"x1\", \"x2\"),\n  y = c(\"y1\", \"y2\"),\n  covariate = c(\"x1\", \"x2\"),\n  model = c(\"lm\", \"glm\"),\n  # Include all distinct values of g\n  distinct(dat, group)\n)\n```\n:::\n\n::: {#tbl-specs-2 .cell tbl-cap='First six rows of example specifications table with subgroups.' hash='index_cache/html/tbl-specs-2_951a5517d0714adbd6a7fcb059893d14'}\n\n```{.r .cell-code}\nhead(specs) %>% k2()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic-2 lightable-striped\" style=\"font-family: Arial; width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> x </th>\n   <th style=\"text-align:left;\"> y </th>\n   <th style=\"text-align:left;\"> covariate </th>\n   <th style=\"text-align:left;\"> model </th>\n   <th style=\"text-align:left;\"> group </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> y1 </td>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> lm </td>\n   <td style=\"text-align:left;\"> d </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> y1 </td>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> lm </td>\n   <td style=\"text-align:left;\"> b </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> y1 </td>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> lm </td>\n   <td style=\"text-align:left;\"> c </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> y1 </td>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> lm </td>\n   <td style=\"text-align:left;\"> a </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> y1 </td>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> glm </td>\n   <td style=\"text-align:left;\"> d </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> y1 </td>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> glm </td>\n   <td style=\"text-align:left;\"> b </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nNow each row in the table specifies 1. the modelling function (e.g. `lm()`), the subgroup, and the left-hand and right-hand side variables of the formula to put in the modelling function. Next, we need a function to also expand the covariates to all their combinations (I lifted much of this from the [specr source](https://github.com/masurp/specr/blob/7d5a0c3664dd5d281ecaebb783ce75b638447205/R/setup_specs.r#L41), I found it surprisingly hard to write):\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-12_c2a355d5d6798bf491ec3de29f930469'}\n\n```{.r .cell-code}\n#' Expand a vector of covariate names to all their combinations\n#'\n#' For example expand_covariate(c(\"age\", \"sex\")) returns\n#' c(\"1\", \"age\", \"sex\", \"age + sex\")\n#'\n#' @param covariate vector of covariate(s) e.g. c(\"age\", \"sex\")\n#'\n#' @return a character vector of all predictor combinations (incl. Intercept)\nexpand_covariate <- function(covariate) {\n  list(\n    \"1\",\n    do.call(\n      \"c\",\n      map(seq_along(covariate), ~combn(covariate, .x, FUN = list))) %>%\n      map(~paste(.x, collapse = \" + \"))\n  ) %>%\n    unlist\n}\n```\n:::\n\n\n### The specification table\n\nPutting all this together, and also creating the formulas from `y`, `x`, and `c`, we have completed the first part of our pipeline, creating the specifications:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-13_31bc7224b7c21af83c74d4b7e94b1484'}\n\n```{.r .cell-code}\nspecs <- expand_grid(\n  x = c(\"x1\", \"x2\"),\n  y = c(\"y1\", \"y2\"),\n  covariate = expand_covariate(c(\"c1\", \"c2\")),\n  model = c(\"lm\", \"glm\"),\n  distinct(dat, group)\n) %>% \n  mutate(formula = paste0(y, \" ~ \", x, \" + \", covariate))\n```\n:::\n\n::: {#tbl-specs-3 .cell tbl-cap='First six rows of example specifications table with subgroups and formulas.' hash='index_cache/html/tbl-specs-3_17968333a512f3b2750a2687b85be941'}\n\n```{.r .cell-code}\nhead(specs) %>% k2()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic-2 lightable-striped\" style=\"font-family: Arial; width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> x </th>\n   <th style=\"text-align:left;\"> y </th>\n   <th style=\"text-align:left;\"> covariate </th>\n   <th style=\"text-align:left;\"> model </th>\n   <th style=\"text-align:left;\"> group </th>\n   <th style=\"text-align:left;\"> formula </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> y1 </td>\n   <td style=\"text-align:left;\"> 1 </td>\n   <td style=\"text-align:left;\"> lm </td>\n   <td style=\"text-align:left;\"> d </td>\n   <td style=\"text-align:left;\"> y1 ~ x1 + 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> y1 </td>\n   <td style=\"text-align:left;\"> 1 </td>\n   <td style=\"text-align:left;\"> lm </td>\n   <td style=\"text-align:left;\"> b </td>\n   <td style=\"text-align:left;\"> y1 ~ x1 + 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> y1 </td>\n   <td style=\"text-align:left;\"> 1 </td>\n   <td style=\"text-align:left;\"> lm </td>\n   <td style=\"text-align:left;\"> c </td>\n   <td style=\"text-align:left;\"> y1 ~ x1 + 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> y1 </td>\n   <td style=\"text-align:left;\"> 1 </td>\n   <td style=\"text-align:left;\"> lm </td>\n   <td style=\"text-align:left;\"> a </td>\n   <td style=\"text-align:left;\"> y1 ~ x1 + 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> y1 </td>\n   <td style=\"text-align:left;\"> 1 </td>\n   <td style=\"text-align:left;\"> glm </td>\n   <td style=\"text-align:left;\"> d </td>\n   <td style=\"text-align:left;\"> y1 ~ x1 + 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> x1 </td>\n   <td style=\"text-align:left;\"> y1 </td>\n   <td style=\"text-align:left;\"> 1 </td>\n   <td style=\"text-align:left;\"> glm </td>\n   <td style=\"text-align:left;\"> b </td>\n   <td style=\"text-align:left;\"> y1 ~ x1 + 1 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n## Estimating the specifications\n\nHaving set up the specifications, all that is left to do is to iterate over its rows, while at the same time use the correct subsets of data. While iterating, we will get the slope parameter from each row using `tidy()`. Here's how it could look like. The arguments to `pmap()` require some explaining. We are creating a cell on each row of `specs` using `pmap()`. This will apply a function to all the named elements in `list()`. The function, then, is `do.call()`, which takes the name of the function (here, `lm()` or `glm()`) as the first argument, passed using the shorthand `..1`. Then, we provide a list of arguments to the function. `formula = ..2` takes the second element from the above list. `data` takes our main data frame `dat`, but filters it based on the groups, passed in with `..3` (`group` in the above list). We then pipe the results to `tidy()` to give a tibble of the estimated parameters, and `slice()` to just take the second row of the parameters (the slope parameter). The `unnest()` command at the end unnests the resulting tibble of results into the specs table.\n\n\n::: {.cell hash='index_cache/html/tidy-multiverse_160fbed96e3afce30deabac3373935d6'}\n\n```{.r .cell-code}\nlibrary(broom)\ntic()\nresults_1 <- specs %>% \n  mutate(\n    out = pmap(\n      list(model, formula, group), \n      ~do.call(\n        ..1, \n        list(formula = ..2, data = filter(dat, group == ..3))\n      ) %>% \n        tidy(conf.int = TRUE) %>% \n        slice(2)\n    )\n  ) %>% \n  unnest(out)\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n13.419 sec elapsed\n```\n:::\n:::\n\n\nWe already see an improvement in the run-time of this pipeline over `run_specs()`, but note that my implementation does not estimate models for the complete data (`subsets` = `all` in specr), so it is not an entirely fair comparison.\n\n## Parallel estimation\n\nNow that we have our pipeline set up, we can use multidplyr to easily (and safely!) parallelize our computations.\n\n:::{.callout-note}\nParallelization is hard and rarely works out of the box. Multidplyr works best when the individual computations are slow, because there is always some overhead in sending stuff back and forth between the nodes of the cluster. So the benefits will be even greater with larger data or slower models. The benefit of using multidplyr vs other parallel backends is that the user retains control over how to split up the computations. Your feedback is more than welcome (comments are open at the end of this post)!\n:::\n\nTo start, we load multidplyr, create a new cluster, and send the required libraries and variables to it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(multidplyr)\n# Create a new cluster\ncluster <- new_cluster(8)\n\n# Load libraries in and send data to nodes in the cluster\ncluster_library(cluster, c(\"purrr\", \"broom\", \"tidyr\", \"dplyr\"))\ncluster_copy(cluster, c(\"dat\"))\n```\n:::\n\n\nMultidplyr integrates seamlessly into `%>%`lines by sending groups in the passed data to nodes in the cluster. It is therefore important to think a bit about how to group your data. For us, we want to equally divide the `lm()` and `glm()` calls across nodes, because `glm()` is considerably slower. If one node got all the `glm()` calls, we would have to wait for that one node even after the others had completed.\n\nHere, it makes sense for us to group the data by `formula` and `group`. After grouping the data, we `partition()` it across the nodes in the cluster, run our computations, and then `collect()` the results back to our main R process. I also pass the `tidy()` results to `slice(2)` to just get the slope parameters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntic()\nresults_2 <- specs %>% \n  group_by(formula, group) %>% \n  partition(cluster) %>%\n  mutate(\n    out = pmap(\n      list(model, formula, group), \n      ~do.call(..1, list(formula = ..2, data = filter(dat, .data[[\"group\"]] == ..3))) %>% \n        tidy(conf.int = TRUE) %>% \n        slice(2)\n    )\n  ) %>% \n  collect() %>% \n  ungroup() %>% \n  unnest(out)\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4.089 sec elapsed\n```\n:::\n:::\n\n\nThis particular parallelization scheme (8 cores working on subsets defined by `formula` and `group` in `dat`) sped up our computations about 8 times compared to the original implementation, and about 4 times compared to the non-parallelized equivalent. Good stuff.\n\nI also spot check that the results are consistent across the methods. I am a bit paranoid with what comes to parallel computation.\n\n\n::: {#tbl-results-check .cell tbl-cap='Example results from the three estimation methods.' hash='index_cache/html/tbl-results-check_e60317c685f391f1f922ca746efbd363'}\n\n```{.r .cell-code}\nbind_rows(\n  \"specr\" = results_specr %>% \n    filter(subsets != \"all\", x == \"x1\", y == \"y1\", model == \"lm\", controls == \"c1\") %>% \n    rename(covariate = controls, group = subsets) %>% \n    mutate(group = str_remove(group, \"group = \")),\n  \"tidymultiverse\" = results_1 %>% \n    filter(term == x, x == \"x1\", y == \"y1\", model == \"lm\", covariate == \"c1\") %>% \n    select(-formula, -term),\n  \"TM (parallel)\" = results_2 %>% \n    filter(term == x, x == \"x1\", y == \"y1\", model == \"lm\", covariate == \"c1\") %>% \n    select(-formula, -term),\n  .id = \"Method\"\n) %>% \n  select(Method, estimate, std.error, conf.low, conf.high, group) %>% \n  arrange(group) %>% \n  k2()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic-2 lightable-striped\" style=\"font-family: Arial; width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Method </th>\n   <th style=\"text-align:right;\"> estimate </th>\n   <th style=\"text-align:right;\"> std.error </th>\n   <th style=\"text-align:right;\"> conf.low </th>\n   <th style=\"text-align:right;\"> conf.high </th>\n   <th style=\"text-align:left;\"> group </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> specr </td>\n   <td style=\"text-align:right;\"> 0.09 </td>\n   <td style=\"text-align:right;\"> 0.01 </td>\n   <td style=\"text-align:right;\"> 0.08 </td>\n   <td style=\"text-align:right;\"> 0.11 </td>\n   <td style=\"text-align:left;\"> a </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> tidymultiverse </td>\n   <td style=\"text-align:right;\"> 0.09 </td>\n   <td style=\"text-align:right;\"> 0.01 </td>\n   <td style=\"text-align:right;\"> 0.08 </td>\n   <td style=\"text-align:right;\"> 0.11 </td>\n   <td style=\"text-align:left;\"> a </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> TM (parallel) </td>\n   <td style=\"text-align:right;\"> 0.09 </td>\n   <td style=\"text-align:right;\"> 0.01 </td>\n   <td style=\"text-align:right;\"> 0.08 </td>\n   <td style=\"text-align:right;\"> 0.11 </td>\n   <td style=\"text-align:left;\"> a </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> specr </td>\n   <td style=\"text-align:right;\"> 0.11 </td>\n   <td style=\"text-align:right;\"> 0.01 </td>\n   <td style=\"text-align:right;\"> 0.09 </td>\n   <td style=\"text-align:right;\"> 0.12 </td>\n   <td style=\"text-align:left;\"> b </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> tidymultiverse </td>\n   <td style=\"text-align:right;\"> 0.11 </td>\n   <td style=\"text-align:right;\"> 0.01 </td>\n   <td style=\"text-align:right;\"> 0.09 </td>\n   <td style=\"text-align:right;\"> 0.12 </td>\n   <td style=\"text-align:left;\"> b </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> TM (parallel) </td>\n   <td style=\"text-align:right;\"> 0.11 </td>\n   <td style=\"text-align:right;\"> 0.01 </td>\n   <td style=\"text-align:right;\"> 0.09 </td>\n   <td style=\"text-align:right;\"> 0.12 </td>\n   <td style=\"text-align:left;\"> b </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> specr </td>\n   <td style=\"text-align:right;\"> 0.10 </td>\n   <td style=\"text-align:right;\"> 0.01 </td>\n   <td style=\"text-align:right;\"> 0.09 </td>\n   <td style=\"text-align:right;\"> 0.11 </td>\n   <td style=\"text-align:left;\"> c </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> tidymultiverse </td>\n   <td style=\"text-align:right;\"> 0.10 </td>\n   <td style=\"text-align:right;\"> 0.01 </td>\n   <td style=\"text-align:right;\"> 0.09 </td>\n   <td style=\"text-align:right;\"> 0.11 </td>\n   <td style=\"text-align:left;\"> c </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> TM (parallel) </td>\n   <td style=\"text-align:right;\"> 0.10 </td>\n   <td style=\"text-align:right;\"> 0.01 </td>\n   <td style=\"text-align:right;\"> 0.09 </td>\n   <td style=\"text-align:right;\"> 0.11 </td>\n   <td style=\"text-align:left;\"> c </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> specr </td>\n   <td style=\"text-align:right;\"> 0.09 </td>\n   <td style=\"text-align:right;\"> 0.01 </td>\n   <td style=\"text-align:right;\"> 0.08 </td>\n   <td style=\"text-align:right;\"> 0.11 </td>\n   <td style=\"text-align:left;\"> d </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> tidymultiverse </td>\n   <td style=\"text-align:right;\"> 0.09 </td>\n   <td style=\"text-align:right;\"> 0.01 </td>\n   <td style=\"text-align:right;\"> 0.08 </td>\n   <td style=\"text-align:right;\"> 0.11 </td>\n   <td style=\"text-align:left;\"> d </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> TM (parallel) </td>\n   <td style=\"text-align:right;\"> 0.09 </td>\n   <td style=\"text-align:right;\"> 0.01 </td>\n   <td style=\"text-align:right;\"> 0.08 </td>\n   <td style=\"text-align:right;\"> 0.11 </td>\n   <td style=\"text-align:left;\"> d </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n# Complete tidymultiverse example\n\nLet's take this one step further and show an example of a complete pipeline. We still analyse the same dataset, but with an additional complexity: We are worried about outliers in the data, and would like to explore a multiverse over different data filtering thresholds (reject `y1` values that are more than 1, 2, or 3 standard deviations from the mean). We can implement this in many ways. For example, we could create indicator variables that could be used as subgroups just as we have done with `group` so far. Another interesting alternative is to dynamically filter the source data in the function that iterates over the specs table. We take the latter route here.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-19_85402d14a04c69766ed7469d1fdc7b78'}\n\n```{.r .cell-code  code-line-numbers=\"true\"}\ntic()\nresults <- expand_grid(\n  threshold = c(1, 2, 3),\n  x = c(\"x1\", \"x2\"),\n  y = c(\"y1\", \"y2\"),\n  covariate = expand_covariate(c(\"c1\", \"c2\")),\n  model = c(\"lm\", \"glm\"),\n  distinct(dat, group)\n) %>% \n  mutate(formula = paste0(y, \" ~ \", x, \" + \", covariate)) %>% \n  group_by(formula, group) %>%\n  partition(cluster) %>%\n  mutate(\n    out = pmap(\n      list(model, formula, group, threshold), \n      ~do.call(\n        ..1, \n        list(\n          formula = ..2, \n          data = filter(\n            dat, \n            group == ..3,\n            between(y1, mean(y1) - sd(y1)*..4, mean(y1) + sd(y1)*..4)\n          )\n        )\n      ) %>% \n        tidy(conf.int = TRUE) %>% \n        slice(2)\n    )\n  ) %>% \n  collect() %>%\n  unnest(out) %>%\n  ungroup()\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n8.295 sec elapsed\n```\n:::\n:::\n\n\nOk, ok, that was too much in one go. Let's focus on the key piece here: Applying the modelling function to each row of the specifications, on rows 15 to 27. \n\n- `list(model, formula, group, threshold)`\n  - We pick these variables from the specification table to use as arguments in `do.call()`\n- `do.call(**..1**)`\n  - This means that we will run the function named in the first element in the above list, `model` (which is `lm` or `glm`), with the subsequent arguments\n- `formula = ..2`, use the second element from the list passed to `pmap()` as the `formula` argument of `model` (e.g. `lm()`) \n- `data = filter(...)`\n  - This is where the action is. We dynamically filter the source data frame `dat` based on variables in the specification table.\n  - `group == ..3` means that we filter the data on group (the third argument in the list of arguments passed to `pmap()`)\n  - `between(y1, mean(y1) - sd(y1)*..4, mean(y1) + sd(y1)*..4)` we filter data in `dat` based on the fourth argument `threshold`. This line says to include only `y1` values that are within `..4` (= `threshold` in the specification table) standard deviations from the mean.\n\nThis syntax seems a bit hairy, but it is entirely general. The key point here is that we don't have to learn any new syntax from a new package, but can simply keep applying tidyverse's `%>%`lines with familiar dplyr verbs like `filter()`. The ugly aspect here is that we are sneaking in those `%>%`lines inside the `do.call()` function, which then iterates over the specification table.\n\n## A visualization\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\nresults <- arrange(results, estimate) %>% mutate(spec = 1:n())\np_dash <- results %>% \n  select(spec, p.value, threshold:group) %>% \n  pivot_longer(-c(spec, p.value), values_transform = as.character) %>% \n  ggplot(aes(spec, value, col = p.value < 0.05)) +\n  scale_color_brewer(palette = \"Set1\") +\n  scale_x_continuous(\n    \"Specification\"\n  ) +\n  geom_point(size = 0.5) +\n  facet_grid(rows = vars(name), scales = \"free_y\", space = \"free_y\") +\n  theme(axis.title.y = element_blank())\np_curve <- results %>% \n  ggplot(aes(spec, estimate, col = p.value < 0.05)) +\n  scale_color_brewer(palette = \"Set1\") +\n  geom_pointrange(aes(ymin = conf.low, ymax = conf.high), size = 0.5)\n(p_curve / p_dash) &\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![Specification curve figure example with ggplot().](index_files/figure-html/fig-results-2-1.png){#fig-results-2 width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}