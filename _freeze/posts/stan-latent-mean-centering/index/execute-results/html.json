{
  "hash": "2eb7833e9c15d5203a529c6d92a3c8f8",
  "result": {
    "markdown": "---\ntitle: Latent mean centering in Stan (and brms)\ndescription: '**WIP** Researchers studying longitudinal data routinely center their predictors to target specific research questions. The most common centering method separates an observed variable into between- and within-person components. This \"centering within cluster\" is beneficial because it allows examining within-person processes independent from between-person dynamics [@endersCenteringPredictorVariables2007]. However, centering variables on the observed means can bias the resulting estimates, a problem that is avoided with latent mean centering. In this entry, I explore how to latent-mean-center variables in multilevel models using brms.'\ndate: 2023-01-01\ncategories:\n  - R\n  - modelling\n  - bayes\n  - stan\n  - brms\nreference-location: margin\nknitr:\n  opts_chunk: \n    message: false\n    warning: false\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Code\"\n    code-overflow: wrap\n    from: markdown+emoji\nimage: \"\"\ndraft: true\nbibliography: references.bib\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n# Packages\nlibrary(knitr)\nlibrary(brms)\nlibrary(ggthemes)\nlibrary(scales)\nlibrary(kableExtra)\nlibrary(posterior)\nlibrary(tidyverse)\n\n# Options for sampling\noptions(\n  brms.backend = \"rstan\",\n  mc.cores = parallel::detectCores(logical = FALSE)\n  )\n\n# Function for tables\nk2 <- function(x) {\n  x %>% \n    kbl(digits = 2, format = \"markdown\") %>% \n    kable_classic_2(\"striped\", full_width = FALSE, html_font = \"Arial\")\n}\n\n# Plotting theme\ntheme_set(\n  theme_few() +\n  theme(\n    axis.title.y = element_blank(),\n    legend.title = element_blank(), \n    panel.grid.major = element_line(linetype = \"dotted\", linewidth = .1),\n    legend.position = \"bottom\", \n    legend.justification = \"left\"\n  )\n)\n\n# Download and uncompress McNeish and Hamaker materials if not yet done\npath <- \"materials/materials.zip\"\nif (!file.exists(path)) {\n  dir.create(\"materials\", showWarnings = FALSE)\n  download.file(\n    \"https://files.osf.io/v1/resources/wuprx/providers/osfstorage/5bfc839601593f0016774697/?zip=\",\n    destfile = path\n  )\n  unzip(path, exdir = \"materials\")\n}\n```\n:::\n\n\n::: callout-important\n# Work in progress!\n\nI have not yet figured out how to do latent mean centering with Stan or brms. I know that it can be done with Stan (what can't?). I am not sure, however, if we can latent-mean-center with brms.\n\nIf you don't care about the context and want to get straight to the modelling/coding problem, skip straight to the [multilevel model](#multilevel-ar1-model) section.\n\nIf you would like to help with this problem, please check out the [GitHub repo](https://github.com/mvuorre/mvuorre.github.io/tree/main/posts/stan-latent-mean-centering).\n\nI've also posted a question about this on the Stan forums: <https://discourse.mc-stan.org/t/latent-mean-centering-latent-covariate-models-in-brms/29424>.\n:::\n\n# Introduction\n\nWithin cluster centering, or *person-mean centering* (psychologists' clusters are typically persons), is an easy but essential data processing step. For example consider the example data of 100 people's ratings of urge to smoke and depression, collected over 50 days with one response per day [@mcneishPrimerTwolevelDynamic2020] [^1], shown in @tbl-data and @fig-data.\n\n[^1]: Grab a free copy at <https://osf.io/j56bm/download>. I couldn't figure if this example data is real or simulated, or what the measurement instruments were.\n\n\n::: {#tbl-data .cell tbl-cap='Example longitudinal data (McNeish & Hamaker, 2020)'}\n\n```{.r .cell-code}\nd <- read_csv(\n  \"materials/Data/Two-Level Data.csv\", \n  col_names = c(\"urge\", \"dep\", \"js\", \"hs\", \"person\", \"time\")\n) %>% \n  select(-hs, -js) %>% \n  relocate(person, time, 1)\n\nd <- d %>% \n  # Grand mean center both variables\n  mutate(across(c(urge, dep), list(c = ~ . - mean(.)))) %>% \n  group_by(person) %>% \n  mutate(\n    across(\n      c(urge_c, dep_c), \n      list(\n        # Between-person center (= person's mean)\n        b = ~ mean(.), \n        # Within-person center (= deviation from person's mean)\n        w = ~ . - mean(.)\n      ),\n      .names = \"{.col}{.fn}\"\n    )\n  ) %>% \n  ungroup()\n\nd %>% \n  select(1:4) %>% \n  slice(1:5, 51:55) %>% \n  k2() %>% \n  footnote(\n    \"Only displaying two participants' first five observations. _c: grand mean centered; _cb: between-person centered (ie. person mean); _cw: within-person centered.\", \n    footnote_as_chunk = TRUE\n  )\n```\n\n::: {.cell-output-display}\n| person| time|  urge|   dep|\n|------:|----:|-----:|-----:|\n|      1|    1|  0.34|  0.43|\n|      1|    2| -0.48| -0.68|\n|      1|    3| -4.44| -1.49|\n|      1|    4| -4.19| -0.74|\n|      1|    5| -0.91| -0.52|\n|      2|    1|  1.65|  0.68|\n|      2|    2|  0.31|  1.49|\n|      2|    3|  0.46|  0.03|\n|      2|    4| -1.09| -1.02|\n|      2|    5|  1.67|  1.07|\n:::\n:::\n\n\nThe first four variables in @tbl-data are the original data values, indicating the person and timepoint of measurement, urge to smoke, and depression. I've then created the grand-mean, between-person, and within-person variables by simple data transformations. Between-person centered variables are person-specific means, and within-person centered variables are deviations around that person's mean.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(999)\nd %>% \n  filter(person %in% sample(1:100, 4)) %>% \n  select(1:4) %>% \n  pivot_longer(urge:dep) %>% \n  rename(Time = time) %>% \n  mutate(name = factor(name, labels = c(\"Depression\", \"Urge\"))) %>% \n  ggplot(aes(Time, value, col = name)) +\n  geom_line(linewidth = .5) +\n  facet_wrap(\"person\", nrow = 1, labeller = label_both)\n```\n\n::: {.cell-output-display}\n![Four persons' depression and urge to smoke over time](index_files/figure-html/fig-data-1.png){#fig-data width=672}\n:::\n:::\n\n\nHowever, the person-mean is an unknown quantity, and centering on the observed value rather than an estimate of the true \"latent\" quantity can be problematic. Specifically, observed mean centering leads to Nickell's (negative bias in autoregressive effects) and LÃ¼dtke's (bias in other time-varying effects) biases [@mcneishPrimerTwolevelDynamic2020, p. 617-618]. Essentially these problems arise from not considering that the person means are unobserved, latent quantities, but instead treating them as values known without uncertainty.\n\nSo, what to do? McNeish and Hamaker [-@mcneishPrimerTwolevelDynamic2020] and others discuss latent mean centering, which accounts for uncertainty in the person-means appropriately, and thus debiases the estimated coefficients. Latent mean centering is done inside the model, and means treating the means as estimated parameters. However, I have only been able to find examples that do this latent mean centering in MPlus, such as [@mcneishPrimerTwolevelDynamic2020]. Therefore my goal here is to reproduce their model with the free and open source software [Stan](https://mc-stan.org) front-end [brms](https://paul-buerkner.github.io/brms/).\n\n# Single-level AR(1) model\n\nTo begin with, we replicate the authors' basic N=1 model predicting the urge to smoke from the urge to smoke on a previous measurement occasion, and the current level of depression. Because we are modelling one person's data only, there is no need for centering, but this model serves as a useful starting point for our quest.\n\nFollowing [@mcneishPrimerTwolevelDynamic2020], we assume that Urge at time $t$ is normally distributed around a mean $\\mu_t$ with standard deviation $\\sigma$. We then model the mean on an intercept, on Urge at the previous measurement occasion, and on the current level of depression[^I've used the more common $\\phi$ (phi) throughout than the $\\varphi$ used by M&P (because I couldn't get it to render in HTML!)]:\n\n$$\\begin{align*}\n\\text{Urge}_{t} &\\sim N(\\mu_{t}, \\sigma^2), \\\\\n\\mu_{t} &= \\alpha + \\phi\\text{Urge}_{(t-1)} + \\beta\\text{Dep}_{t}\n\\end{align*}$$ {#eq-n1}\n\nThis is straightforward. We first create a lagged urge variable, and then fit the model. Notice though that this will lead to one missing data point because the first value doesn't have a lagged value. We confirm that our estimates are in line with those reported in the paper\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\n# Estimate model\nm2 <- brm(\n  urge ~ urge1 + dep,\n  family = gaussian(),\n  data = d %>% \n    # Pick one individual (same as used in M&H2020)\n    filter(person == 5) %>% \n    # Create lagged urge\n    mutate(urge1 = lag(urge)),\n  file = \"m2\"\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Show table of coefficients' posterior summaries\nas_draws_df(m2) %>% \n  select(1:4) %>% \n  mutate(sigma_sq = sigma^2, .keep = \"unused\") %>% \n  summarise_draws(median, ~quantile2(., probs = c(.025, .975))) %>% \n  mutate(\n    variable = str_c(\n      variable, \n      c(\" ($\\\\alpha$)\", \" ($\\\\phi$)\", \" ($\\\\beta$)\", \" ($\\\\sigma^2$)\")\n    ),\n    across(c(median, q2.5, q97.5), ~number(., .01)),\n    `Result (brms)` = str_glue(\"{median} [{q2.5}, {q97.5}]\"),\n    Authors = c(\n      \"0.07 [-0.24, 0.39]\", \n      \"0.35 [0.25, 0.46]\", \n      \"2.43 [2.12, 2.75]\", \n      \"1.36 [0.92, 2.20]\"\n    )\n  ) %>% \n  select(-c(median:q97.5)) %>% \n  k2()\n```\n\n::: {.cell-output-display}\n|variable               |Result (brms)      |Authors            |\n|:----------------------|:------------------|:------------------|\n|b_Intercept ($\\alpha$) |0.08 [-0.27, 0.41] |0.07 [-0.24, 0.39] |\n|b_urge1 ($\\phi$)       |0.35 [0.24, 0.47]  |0.35 [0.25, 0.46]  |\n|b_dep ($\\beta$)        |2.44 [2.11, 2.75]  |2.43 [2.12, 2.75]  |\n|sigma_sq ($\\sigma^2$)  |1.35 [0.90, 2.09]  |1.36 [0.92, 2.20]  |\n:::\n:::\n\n\n# Multilevel AR(1) model {#multilevel-ar1-model}\n\nAbove, we modelled a single person's urge to smoke on their previous urge to smoke and current depression. Here, we attempt to model 100 individuals' data in a single multilevel model. Before worrying about latent mean centering, we can estimate this model using the observed mean centered values shown in Table @tbl-data. The authors' model of these data is\n\n$$\\begin{align*}\n\\text{Urge}_{ti} &\\sim N(\\mu_{ti}, \\sigma^2), \\\\\n\\mu_{ti} &= \\bar{\\alpha} + \\alpha_i + (\\bar{\\phi}+\\phi_i)\\text{Urge}^c_{(t-1)i} + (\\bar{\\beta} + \\beta_i)\\text{Dep}^c_{ti}, \\\\\n(\\alpha_i, \\phi_i, \\beta_i) &\\sim MVN(\\pmb{0}, \\Sigma),\n\\end{align*}$$ {#eq-ml}\n\nwhere we now have a subscript $i$ for participants, parameters with bars (population-level) and without (person-specific, with subscripts $i$), and the variance-covariance matrix for the latter, where all covariances are set to zero as in [@mcneishPrimerTwolevelDynamic2020]. Notice that the the subscripted parameters are deviations with a mean of zero, so we can talk about e.g. $\\bar{\\alpha} + \\alpha_2$ as person 2's intercept. $\\text{Urge}^c_{(t-1)i}$ and $\\text{Dep}^c_{ti}$ are the within-person centered values of urge to smoke on the previous timepoint and depression, respectively (`_cw` values in Table @tbl-data.) We can fit this model with brms with a small modification of the previous model\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\n# Create lagged variable\nm4_data <- d %>% \n  group_by(person) %>% \n  mutate(urge1 = lag(urge)) %>% \n  ungroup()\n\n# Estimate model\nm4 <- brm(\n  urge ~ urge_cw1 + dep_cw + (urge_cw1 + dep_cw || person),\n  family = gaussian(),\n  data = m4_data,\n  file = \"m4\"\n)\n```\n:::\n\n\nWe now estimated the model using observed person mean centering. These estimates are very close to the ones reported in authors' Table 4, because there are so many observations per person. (Note this is probably not the best example because of this, and also because I don't really know what the data are from the paper). Importantly, we have not estimated the latent depression variable, so that is missing\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Show table of coefficients' posterior summaries\nas_draws_df(m4) %>% \n  select(1:7) %>% \n  mutate(\n    across(c(starts_with(\"sd_\"), \"sigma\"), ~.^2)\n  ) %>% \n  # mutate(sigma_sq = sigma^2, .keep = \"unused\") %>% \n  summarise_draws(median, ~quantile2(., probs = c(.025, .975))) %>% \n  mutate(\n    variable = str_c(\n      variable, \n      c(\" ($\\\\alpha$)\", \" ($\\\\phi$)\", \" ($\\\\beta$)\",\n        \" ($\\\\sigma^2_{\\\\alpha}$)\", \" ($\\\\sigma^2_{\\\\phi)}$\", \n        \" ($\\\\sigma^2_{\\\\beta})$\", \" ($\\\\sigma^2$)\")\n      ),\n    across(c(median, q2.5, q97.5), ~number(., .01)),\n    `Result (brms)` = str_glue(\"{median} [{q2.5}, {q97.5}]\"),\n    Authors = c(\n      \"-0.01 [-0.18, 0.16]\",\n      \" 0.21 [0.17, 0.24]\",\n      \" 0.80 [0.61, 0.95]\",\n      \" 0.60 [0.44, 0.83]\",\n      \" 0.02 [0.01, 0.03]\",\n      \" 0.79 [0.61, 0.95]\",\n      \" 1.14 [1.09, 1.19]\"\n    )\n  ) %>% \n  select(-c(median:q97.5)) %>% \n  k2()\n```\n\n::: {.cell-output-display}\n|variable                                   |Result (brms)      |Authors             |\n|:------------------------------------------|:------------------|:-------------------|\n|b_Intercept ($\\alpha$)                     |0.02 [-0.15, 0.17] |-0.01 [-0.18, 0.16] |\n|b_urge_cw1 ($\\phi$)                        |0.20 [0.16, 0.23]  |0.21 [0.17, 0.24]   |\n|b_dep_cw ($\\beta$)                         |0.79 [0.62, 0.97]  |0.80 [0.61, 0.95]   |\n|sd_person__Intercept ($\\sigma^2_{\\alpha}$) |0.68 [0.52, 0.90]  |0.60 [0.44, 0.83]   |\n|sd_person__urge_cw1 ($\\sigma^2_{\\phi)}$    |0.02 [0.01, 0.03]  |0.02 [0.01, 0.03]   |\n|sd_person__dep_cw ($\\sigma^2_{\\beta})$     |0.77 [0.58, 1.03]  |0.79 [0.61, 0.95]   |\n|sigma ($\\sigma^2$)                         |1.14 [1.10, 1.19]  |1.14 [1.09, 1.19]   |\n:::\n:::\n\n\nThe problem then boils down to figuring out how to get the quantities $\\text{Urge}^c_{(t-1)i}$ and $\\text{Dep}^c_{ti}$. Usually, we calculate them from data as deviations from the person's observed mean, like we did above in Table 1. However, here' we want to use latent-mean centering:\n\n$$\\begin{align*}\n\\text{Urge}^n_{(t-1)i} &= \\text{Urge}^c_{(t-1)i} + \\text{Urge}^b_i, \\\\\n\\text{Dep}^n_{ti} &= \\text{Dep}^c_{ti} + \\text{Dep}^b_i\n\\end{align*}$$ {#eq-lmc}\n\n## brms\n\nI think we can write this with brms nonlinear syntax.^[Note that $\\alpha$ is also the mean of `urge1`, which consequently doesn't need its own mean estimated (this one tripped me up.)]\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nm4_latent_formula <- bf(\n  urge ~ alpha + phi*(urge1 - alpha) + beta*(dep - depb),\n  # Latent intercept of urge\n  alpha ~ 1 + (1 | person),  \n  # Latent mean of depression\n  depb ~ 1 + (1 | person),\n  # 'Effect' of latent mean-person centered lagged urge on urge\n  phi ~ 1 + (1 | person), \n  # 'Effect' of latent mean-person centered depression on urge\n  beta ~ 1 + (1 | person),\n  nl = TRUE\n) +\n  gaussian()\n\np <- get_prior(m4_latent_formula, data = m4_data) %>%\n  mutate(\n    prior = case_when(\n      class == \"b\" & coef == \"Intercept\" ~ \"normal(0, 1.5)\",\n      class == \"sd\" & coef == \"Intercept\" ~ \"student_t(7, 0, 1)\",\n      TRUE ~ prior\n    )\n  )\n\nm4_latent <- brm(\n  m4_latent_formula,\n  data = m4_data,\n  prior = p,\n  control = list(adapt_delta = 0.99),\n  file = \"m4_latent\"\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nas_draws_df(m4_latent) %>% \n  select(1:9) %>% \n  mutate(\n    across(c(starts_with(\"sd_\"), \"sigma\"), ~.^2)\n  ) %>% \n  summarise_draws(median, ~quantile2(., probs = c(.025, .975))) %>% \n  mutate(variable = str_replace(variable, \"sd_person__\", \"var_\")) %>% \n  mutate(\n    variable = str_c(\n      variable, \n      c(\" ($\\\\alpha$)\", \" ($\\\\phi$)\", \" ($\\\\beta$)\",\n        \" ($\\\\sigma^2_{\\\\alpha}$)\", \" ($\\\\sigma^2_{\\\\phi)}$\", \n        \" ($\\\\sigma^2_{\\\\beta})$\", \" ($\\\\sigma^2$)\")\n      ),\n    across(c(median, q2.5, q97.5), ~number(., .01)),\n    `Result (brms)` = str_glue(\"{median} [{q2.5}, {q97.5}]\"),\n    Authors = c(\n      \"-0.01 [-0.18, 0.16]\",\n      \" 0.21 [0.17, 0.24]\",\n      \" 0.80 [0.61, 0.95]\",\n      \" 0.01 [-0.02, 0.04]\",\n      \" 0.60 [0.44, 0.83]\",\n      \" 0.02 [0.01, 0.03]\",\n      \" 0.79 [0.61, 0.95]\",\n      \" 0.01 [0.00, 0.01]\",\n      \" 1.14 [1.09, 1.19]\"\n    )\n  ) %>% \n  select(-c(median:q97.5)) %>% \n  k2()\n```\n\n::: {.cell-output-display}\n|variable                                |Result (brms)       |Authors             |\n|:---------------------------------------|:-------------------|:-------------------|\n|b_alpha_Intercept ($\\alpha$)            |-0.11 [-0.33, 0.08] |-0.01 [-0.18, 0.16] |\n|b_depb_Intercept ($\\phi$)               |-0.10 [-0.23, 0.03] |0.21 [0.17, 0.24]   |\n|b_phi_Intercept ($\\beta$)               |0.21 [0.18, 0.25]   |0.80 [0.61, 0.95]   |\n|b_beta_Intercept ($\\sigma^2_{\\alpha}$)  |0.78 [0.62, 0.95]   |0.01 [-0.02, 0.04]  |\n|var_alpha_Intercept ($\\sigma^2_{\\phi)}$ |0.57 [0.41, 0.77]   |0.60 [0.44, 0.83]   |\n|var_depb_Intercept ($\\sigma^2_{\\beta})$ |0.01 [0.00, 0.05]   |0.02 [0.01, 0.03]   |\n|var_phi_Intercept ($\\sigma^2$)          |0.02 [0.01, 0.03]   |0.79 [0.61, 0.95]   |\n|var_beta_Intercept ($\\alpha$)           |0.77 [0.58, 1.02]   |0.01 [0.00, 0.01]   |\n|sigma ($\\phi$)                          |1.14 [1.10, 1.19]   |1.14 [1.09, 1.19]   |\n:::\n:::\n\n\nWe can compare these to the MPlus results, but I don't know how that model works, what the priors are etc. The estimates for phi and beta are the same, but depb and alpha are way off. \n\nAfter chatting with some very helpful folks at the [Stan board](https://discourse.mc-stan.org/t/latent-mean-centering-latent-covariate-models-in-brms/29424/6), it became clear that the latent depression mean isn't appropriately connected to the raw values of depression. That is, we should specify that `dep` is predicted from `depb`. The next challenge is then figuring out how to do that with brms, since `depb` is not observed. If possible, I believe it would require using the `mi()` syntax appropriately. Here is my first walk down that path.^[I haven't used `mi()` before and I'm pretty clearly wandering around in the dark here.]\n\nThis is the first thing I tried: Specifying `depb` as missing everywhere it occurred. However, I get an error that says that it should also be specified as a response variable:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nm4_latent_formula <- bf(\n  urge ~ alpha + phi*(urge1 - alpha) + beta*(dep - mi(depb)),\n  alpha ~ 1 + (1 | person),  \n  dep ~ 0 + mi(depb),\n  depb | mi() ~ 1 + (1 | person),\n  phi ~ 1 + (1 | person), \n  beta ~ 1 + (1 | person),\n  nl = TRUE\n) +\n  gaussian()\n\n# If variable doesn't exist in data, `brm()` gives an error\nm4_data_2 <- m4_data %>% \n  mutate(depb = NaN) %>% \n  drop_na(urge1)\n\nm4_latent <- brm(\n  m4_latent_formula,\n  data = m4_data_2,\n  control = list(adapt_delta = 0.99),\n  file = \"m4_latent_v2\"\n)\n```\n:::\n\n\nSo I then tried putting it in a different `bf()` call. This gives an error in Stan, which I think indicates that `mi(depb)` is interpreted literally:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nm4_latent_formula <- bf(\n  urge ~ alpha + phi*(urge1 - alpha) + beta*(dep - mi(depb)),\n  alpha ~ 1 + (1 | person),  \n  dep ~ 0 + mi(depb),\n  phi ~ 1 + (1 | person), \n  beta ~ 1 + (1 | person),\n  nl = TRUE\n) +\n  bf(depb | mi() ~ 1 + (1 | person)) +\n  gaussian() +\n  set_rescor(FALSE)\n\nm4_latent <- brm(\n  m4_latent_formula,\n  data = m4_data_2,\n  # Prior is required\n  prior = p,\n  control = list(adapt_delta = 0.99),\n  file = \"m4_latent_v2\"\n)\n```\n:::\n\n\nSo I now think that next I should move terms from the non-linear formula to the `X ~ Y` statements below, but I'm not sure how that should look like. [This looks useful](https://discourse.mc-stan.org/t/mi-with-non-linear-model/11227).\n\n### Yet another try\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nm4_latent_formula <- bf(\n  urge ~ alpha + phi*(urge1 - alpha) + beta*(dep - depB),\n  alpha ~ 1 + (1 | person),\n  phi ~ 1 + (1 | person),\n  beta ~ 1 + (1 | person),\n  nlf(depB ~ depBI),\n  depBI ~ 1 + (1 | person),\n  nl = TRUE\n) +\n  gaussian()\n\np <- get_prior(m4_latent_formula, data = m4_data) %>%\n  mutate(\n    prior = case_when(\n      class == \"b\" & coef == \"Intercept\" ~ \"normal(0, 1)\",\n      class == \"sd\" & coef == \"Intercept\" ~ \"student_t(7, 0, 1)\",\n      TRUE ~ prior\n    )\n  )\n\nm4_latent <- brm(\n  m4_latent_formula,\n  data = m4_data,\n  prior = p,\n  control = list(adapt_delta = 0.99),\n  file = \"m4_latent_v3\"\n)\n```\n:::\n\n\nHmhm this seems to work and looks right -- we needed to sneak in a formula to predict the latent mean depression, and the above looks correct. Let's show a pretty table of the parameters\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas_draws_df(m4_latent) %>% \n  select(1:9) %>% \n  mutate(\n    across(c(starts_with(\"sd_\"), \"sigma\"), ~.^2)\n  ) %>% \n  summarise_draws(median, ~quantile2(., probs = c(.025, .975))) %>% \n  mutate(variable = str_replace(variable, \"sd_person__\", \"var_\")) %>% \n  mutate(\n    variable = str_c(\n      variable, \n      c(\" ($\\\\alpha$)\", \" ($\\\\phi$)\", \" ($\\\\beta$)\", \" (DepB)\",\n        \" ($\\\\sigma^2_{\\\\alpha}$)\", \" ($\\\\sigma^2_{\\\\phi)}$\", \n        \" ($\\\\sigma^2_{\\\\beta})$\", \" ($\\\\sigma^2_{DepB})$\",\n        \" ($\\\\sigma^2$)\")\n      ),\n    across(c(median, q2.5, q97.5), ~number(., .01)),\n    `Result (brms)` = str_glue(\"{median} [{q2.5}, {q97.5}]\"),\n    Authors = c(\n      \"-0.01 [-0.18, 0.16]\",\n      \" 0.21 [0.17, 0.24]\",\n      \" 0.80 [0.61, 0.95]\",\n      \" 0.01 [-0.02, 0.04]\",\n      \" 0.60 [0.44, 0.83]\",\n      \" 0.02 [0.01, 0.03]\",\n      \" 0.79 [0.61, 0.95]\",\n      \" 0.01 [0.00, 0.01]\",\n      \" 1.14 [1.09, 1.19]\"\n    )\n  ) %>% \n  select(-c(median:q97.5)) %>% \n  k2()\n```\n\n::: {.cell-output-display}\n|variable                                  |Result (brms)       |Authors             |\n|:-----------------------------------------|:-------------------|:-------------------|\n|b_alpha_Intercept ($\\alpha$)              |-0.11 [-0.32, 0.10] |-0.01 [-0.18, 0.16] |\n|b_phi_Intercept ($\\phi$)                  |0.21 [0.18, 0.25]   |0.21 [0.17, 0.24]   |\n|b_beta_Intercept ($\\beta$)                |0.79 [0.61, 0.97]   |0.80 [0.61, 0.95]   |\n|b_depBI_Intercept (DepB)                  |-0.10 [-0.24, 0.04] |0.01 [-0.02, 0.04]  |\n|var_alpha_Intercept ($\\sigma^2_{\\alpha}$) |0.56 [0.41, 0.78]   |0.60 [0.44, 0.83]   |\n|var_phi_Intercept ($\\sigma^2_{\\phi)}$     |0.02 [0.01, 0.03]   |0.02 [0.01, 0.03]   |\n|var_beta_Intercept ($\\sigma^2_{\\beta})$   |0.76 [0.58, 1.04]   |0.79 [0.61, 0.95]   |\n|var_depBI_Intercept ($\\sigma^2_{DepB})$   |0.01 [0.00, 0.05]   |0.01 [0.00, 0.01]   |\n|sigma ($\\sigma^2$)                        |1.14 [1.10, 1.19]   |1.14 [1.09, 1.19]   |\n:::\n:::\n\n\n\n# Stan {.appendix}\n\nThis Stan model is from [Simon Brauer](https://discourse.mc-stan.org/u/simonbrauer) at the Stan board. Thanks Simon!\n\n:::{.callout-note}\nwip the code has errors\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n.m4_data <- m4_data %>% drop_na(urge1)\nm4_data_stan <- list(\n  N = nrow(.m4_data),\n  M = length(unique(.m4_data$person)),\n  urge_t = .m4_data$urge,\n  urge_tm1 = .m4_data$urge1,\n  dep_t = .m4_data$dep\n)\nstr(m4_data_stan)\nlibrary(rstan)\nm4_fit_stan <- stan(\n  file = \"model.stan\",\n  data = m4_data_stan, control = list(adapt_delta = 0.95)\n)\n```\n:::\n\n\n\n# See also {.appendix}\n\nI've found these prior discussions useful\n\n-   <https://quantscience.rbind.io/2020/02/04/bayesian-mlm-with-group-mean-centering/#group-mean-centering-treating-group-means-as-latent-variables>\n-   <https://discourse.mc-stan.org/t/treat-the-cluster-mean-of-a-predictor-variable-as-a-latent-variable-hierarchical-linear-models/15001/5>\n-   <https://discourse.mc-stan.org/t/modeling-latent-means-in-brms-for-multilevel-group-mean-centering/12642/3>\n-   <https://scottclaessens.github.io/blog/2020/brmsLV/>\n-   <https://discourse.mc-stan.org/t/mi-with-non-linear-model/11227>\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}