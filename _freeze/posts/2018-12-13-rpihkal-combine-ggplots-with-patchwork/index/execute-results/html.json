{
  "hash": "6c57eb9ba0a9de81affb9d11fe0aacf1",
  "result": {
    "markdown": "---\ntitle: \"Combine ggplots with patchwork\"\ndescription: |\n  How to combine arbitrary ggplots\ndate: 2018-12-13\ncategories:\n  - data science\n  - visualization\n  - ggplot2\n  - R\nbibliography: bibliography.bib\nimage: \"index_files/figure-html/mainfig-1.png\"\n---\n\n\n\n\n[ggplot2](https://ggplot2.tidyverse.org/) is the best R package for data visualization, and has powerful features for \"facetting\" plots into small multiples based on categorical variables. \n\n## Facetting figures into small multiples\n\nThis \"facetting\" is useful for showing the same figure, e.g. a bivariate relationship, at multiple levels of some other variable\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nggplot(mtcars, aes(mpg, disp)) +\n  geom_point() +\n  facet_wrap(\"cyl\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nBut if you would like to get a figure that consists of multiple panels of unrelated plots---with different variables on the X and Y axes, potentially from different data sources---things become more complicated. \n\n## Combining arbitrary ggplots\n\nSay you have these three figures\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(mtcars)\n  \na <- p +\n  aes(mpg, disp, col = as.factor(vs)) +\n  geom_smooth(se = F) +\n  geom_point()\n\nb <- p + \n  aes(disp, gear, group = gear) +\n  ggstance::geom_boxploth()\n\nc <- p +\n  aes(hp) +\n  stat_density(geom = \"area\") +\n  coord_cartesian(expand = 0)\n```\n:::\n\n\nHow would you go about combining them? There are a few options, such as `grid.arrange()` in the [gridExtra](https://cran.r-project.org/web/packages/gridExtra/index.html) package, and `plot_grid()` in the [cowplot](https://cran.r-project.org/web/packages/cowplot/vignettes/plot_grid.html) package. Today, I'll point out a newer package that introduces a whole new syntax for combining together, [patchwork](https://github.com/thomasp85/patchwork).\n\n## Patchwork\n\npatchwork is not yet on CRAN, so install it from GitHub:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"devtools\")\ndevtools::install_github(\"thomasp85/patchwork\")\n```\n:::\n\n\nOnce you load the package, you can add ggplots together by adding them with `+`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\na + b + c\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\nBasically, you can add ggplots together as if they were geoms inside a single ggplot. However, there's more. `|` specifies side-by-side addition\n\n\n::: {.cell}\n\n```{.r .cell-code}\na | c\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nAnd `/` is for adding plots under the previous plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb / c\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nThese operators can be used to flexibly compose figures from multiple components, using parentheses to group plots and `+`, `|`, and `/` to add the groups together\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(a | b) / c\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nUse `plot_annotation()` to add tags, and `&` to pass theme elements to all plot elements in a composition\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(a | b) / c + \n  plot_annotation(tag_levels = \"A\") & \n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![Tweak this a little bit and throw it in a manuscript.](index_files/figure-html/mainfig-1.png){width=672}\n:::\n:::\n\n\nThere are many more examples on [patchwork's GitHub page](https://github.com/thomasp85/patchwork). I've found this package more useful in composing figures out of multiple plots than its alternatives, mainly because of the concise but powerful syntax.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}