{
  "hash": "94ec836c2a614b12ad2d347f880c3b0f",
  "result": {
    "markdown": "---\ntitle: Confidence intervals in multilevel models\ndescription: How to obtain average & individual-specific confidence limits for regression lines in a multilevel regression modeling context\ndate: 2016-03-06\ncategories:\n  - statistics\n  - R\n  - brms\n  - tutorial\nimage: \"index_files/figure-html/fig1and2-1.png\"\nbibliography: bibliography.bib\n---\n\n\n\n\n\n\nIn this post, I address the following problem: How to obtain regression lines and their associated confidence intervals at the average and individual-specific levels, in a two-level multilevel linear regression.\n\n## Background\n\nVisualization is perhaps the most effective way of communicating the results of a statistical model. For regression models, two figures are commonly used: The coefficient plot shows the coefficients of a model graphically, and can be used to replace or augment a model summary table. The advantage over tables is that it is usually faster to understand the estimated parameters by looking at them in graphical form, but the downside is losing the numerical accuracy of the table. However, both of these model summaries become increasingly difficult to interpret as the number of coefficients increases, and especially when interaction terms are included.\n\nAn alternative visualization is the line plot, which shows what the model implies in terms of the data, such as the relationship between X and Y, and perhaps how that relationship is moderated by other variables. For a linear regression, this plot displays the regression line and its confidence interval. If a confidence interval is not shown, the plot is not complete because the viewer can't visually assess the uncertainty in the regression line, and therefore a simple line without a confidence interval is of little inferential value. Obtaining the line and confidence interval for simple linear regression is very easy, but is not straightforward in a multilevel context, the topic of this post.\n\nMost of my statistical analyses utilize multilevel modeling, where parameters (means, slopes) are treated as varying between individuals. Because common procedures for estimating these models return point estimates for the regression coefficients at all levels, drawing expected regression lines is easy. However, displaying the confidence limits for the regression lines is not as easily done. Various options exist, and some software packages provide these limits automatically, but in this post I want to highlight a completely general approach to obtaining and drawing confidence limits for regression lines at multiple levels of analysis, and where applicable, show how various packages deliver them automatically. This general approach is inference based on probability, or bayesian statistics. In practice, obtaining random samples from the posterior distribution makes it easy to compute values such as confidence limits for any quantity of interest. Importantly, we can summarize the samples with an interval at each level of the predictor values, yielding the confidence interval for the regression line.\n\nI will illustrate the procedure first with a maximum likelihood model fitting procedure, using the lme4 package. This procedure requires an additional step where plausible parameter values are simulated from the estimated model, using the arm package. Then, I'll show how to obtain the limits from models estimated with Bayesian methods, using the brms R package.\n\nWe'll use the following R packages:\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/packages_fabda9916eb57c579547e866e603c024'}\n\n```{.r .cell-code}\nlibrary(knitr)\nlibrary(lme4)\nlibrary(here)\nlibrary(arm)\nlibrary(broom.mixed)\nlibrary(kableExtra)\nlibrary(patchwork)\nlibrary(brms)\nlibrary(tidyverse)\n```\n:::\n\n\n## Example Data\n\nI will use the `sleepstudy` data set from the `lme4` package as an example:\n\n>\"The average reaction time per day for subjects in a sleep deprivation study. On day 0 the subjects had their normal amount of sleep. Starting that night they were restricted to 3 hours of sleep per night. The observations represent the average reaction time on a series of tests given each day to each subject.\" \n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/exdata_4ac3e4078eecfe60c01d65f62b357aac'}\n\n```{.r .cell-code}\nsleepstudy <- as_tibble(sleepstudy)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n<caption>Example data</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> Reaction </th>\n   <th style=\"text-align:right;\"> Days </th>\n   <th style=\"text-align:left;\"> Subject </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 249.56 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;\"> 308 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 258.70 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:left;\"> 308 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 250.80 </td>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:left;\"> 308 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 321.44 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n   <td style=\"text-align:left;\"> 308 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 356.85 </td>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:left;\"> 308 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 414.69 </td>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:left;\"> 308 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nThe data is structured in a long format, where each row contains all variables at a single measurement instance.\n\n## Fixed Effects Models and CIs\n\nBelow, I show two kinds of scatterplots from the data. The left one represents a fixed effects regression, where information about individuals is discarded, and all that is left is a lonely band of inference in a sea of scattered observations. The right panel shows fixed effects regressions separately for each individual.\n\n\n::: {.cell layout-align=\"center\" preview='true' hash='index_cache/html/fig1and2_56d6fbe2e508b6ebfd368d1c8ce937ce'}\n\n```{.r .cell-code}\np1 <- ggplot(sleepstudy, aes(x = Days, y = Reaction)) +\n  geom_point(shape = 1) +\n  scale_x_continuous(breaks = c(0, 3, 6, 9)) +\n  geom_smooth(method = \"lm\", fill = \"dodgerblue\", level = .95)\np2 <- p1 + facet_wrap(~Subject, nrow = 4)\np1 | p2\n```\n\n::: {.cell-output-display}\n![Scatterplots with a completely pooled model (left), and individual specific models (right).](index_files/figure-html/fig1and2-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nObtaining confidence intervals for regression lines using ggplot2 is easy (`geom_smooth()` gives them by default), but an alternative way is to explicitly use the `predict()` function (which ggplot2 uses under the hood). For more complicated or esoteric models, explicit prediction becomes necessary, either using `predict()` or custom code.\n\n## Multilevel model\n\nThe multilevel model I'll fit to these data treats the intercept and effect of days as varying between individuals \n\n\n$$\\mathsf{reaction}_{ij} \\sim \\mathcal{N}(\\mu_{ij}, \\sigma)$$\n\n$$\\mu_{ij} = \\beta_{0j} + \\beta_{1j} \\  \\mathsf{days}_{ij}$$ \n\n$$\\begin{pmatrix}{\\beta_{0j}}\\\\{\\beta_{1j}}\\end{pmatrix} \\sim \n\\mathcal{N} \\begin{pmatrix}{\\gamma_{00}},\\ {\\tau_{00}}\\ {\\rho_{01}}\\\\\n{\\gamma_{10}},\\ {\\rho_{01}}\\ {\\tau_{10}} \\end{pmatrix}$$\n\nIn this post, and the above equations, I'll omit the discussion of hyperpriors (priors on $\\gamma$, $\\tau$ and $\\rho$ parameters.) \n\nIf the above equations baffle the mind, or multilevel models are mysterious to you, @bolgerIntensiveLongitudinalMethods2013 and @gelmanDataAnalysisUsing2007 are great introductions to the topic.\n\n## Maximum likelihood estimation\n\nI'll estimate the multilevel model using the lme4 package.\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/fitlmer_2b785618fc12cf8cdda49c8e3fec4e58'}\n\n```{.r .cell-code}\nlmerfit <- lmer(Reaction ~ Days + (Days | Subject), data = sleepstudy)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n<caption>Multilevel model summary</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> effect </th>\n   <th style=\"text-align:left;\"> term </th>\n   <th style=\"text-align:right;\"> estimate </th>\n   <th style=\"text-align:right;\"> statistic </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> fixed </td>\n   <td style=\"text-align:left;\"> (Intercept) </td>\n   <td style=\"text-align:right;\"> 251.41 </td>\n   <td style=\"text-align:right;\"> 36.84 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> fixed </td>\n   <td style=\"text-align:left;\"> Days </td>\n   <td style=\"text-align:right;\"> 10.47 </td>\n   <td style=\"text-align:right;\"> 6.77 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\nThe key points here are the estimates and their associated standard errors, the latter of which are missing for the varying effects' correlations and standard deviations.\n\n### Working with point estimates\n\nUsing the model output, we can generate regression lines using the `predict()` function. Using this method, we can simply add a new column to the existing `sleepstudy` data frame, giving the fitted value for each row in the data. However, for visualization, it is very useful to generate the fitted values for specific combinations of predictor values, instead of generating a fitted value for every observation. To do this, I simply create dataframes with the relevant predictors, and feed these data frames as data to `predict()`.\n\nTo get fitted values at the average level, when there is only one predictor, the data frame is simply a column with rows for each level of `Days`. For the varying effects, I create a data frame where each individual has all levels of `Days`, using the `expand.grid()` function.\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/pred_lmer_8da706581dfa545b79ad6d470769cc6e'}\n\n```{.r .cell-code}\n# Data frame to evaluate average effects predictions on\nnewavg <- data.frame(Days = 0:9)\nnewavg$Reaction <- predict(lmerfit, re.form = NA, newavg)\n# Predictors for the varying effect's predictions\nnewvary <- expand.grid(Days = 0:9, Subject = unique(sleepstudy$Subject))\nnewvary$Reaction <- predict(lmerfit, newvary)\n```\n:::\n\nI'll show these predictions within the previous figures: On the left, a single fixed effects model versus the average regression line from the new multilevel model, and on the right the separate fixed effects models versus the varying regression lines from the multilevel model. Below, I use blue colors to indicate the fixed effects models' predictions, and black for the multilevel model's predictions.\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/plotlmer_85b7c90bd39cb953a81173759eeb874f'}\n\n```{.r .cell-code}\np1 + geom_line(data = newavg, col = \"black\", size = 1) |\n  p2 + geom_line(data = newvary, col = \"black\", size = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plotlmer-1.png){fig-align='center' width=672}\n:::\n:::\n\nAs you can probably tell, the fixed effects regression line (blue), and the multilevel model's average regression line (black; left panel) are identical, because of the completely balanced design. However, interesting differences are apparent in the right panel: The varying effects' regression lines are different from the separate fixed effects models' regression lines. How? They are \"shrunk\" toward the average-level estimate. Focus on subject 335, an individual whose reaction times got faster with increased sleep deprivation:\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/plotlmerid9_1d4c8fb4df70af98247367e04bc39647'}\n\n```{.r .cell-code}\np2 %+% filter(sleepstudy, Subject == 335) +\n  geom_line(data = filter(newvary, Subject == 335), col = \"black\", size = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plotlmerid9-1.png){fig-align='center' width=432}\n:::\n:::\n\nEstimating each participant's data in their very own model (separate fixed effects models) resulted in a predicted line suggesting to us that this person's cognitive performance is enhanced following sleep deprivation (blue line with negative slope).\n\nHowever, if we used a model where this individual was treated as a random draw from a population of individuals (the multilevel model; black line in the above figure), the story is different. The point estimate for the slope parameter, for this specific individual, from this model (-0.28) tells us that the estimated decrease in reaction times is quite a bit smaller. But this is just a point estimate, and in order to draw inference, we'll need standard errors, or some representation of the uncertainty, in the estimated parameters. The appropriate uncertainty representations will also allow us to draw the black lines with their associated confidence intervals. I'll begin by obtaining a confidence interval for the average regression line.\n\n### CIs using arm: Average level\n\nThe method I will illustrate in this post relies on random samples of plausible parameter values, from which we can then generate regression lines--or draw inferences about the parameters themselves. These regression lines can then be used as their own distribution with their own respective summaries, such as an X% interval. First, I'll show a quick way for obtaining these samples for the lme4 model, using the arm package to generate simulated parameter values.\n\nThe important parts of this code are:\n\n1. Simulating plausible parameter values\n2. Saving the simulated samples (a faux posterior distribution) in a data frame\n3. Creating a predictor matrix\n4. Creating a matrix for the fitted values\n5. Calculating fitted values for each combination of the predictor values, for each plausible combination of the parameter values\n6. Calculating the desired quantiles of the fitted values\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/sim_lmer_0798af5b7cdbb03f041114941331f993'}\n\n```{.r .cell-code}\nsims <- sim(lmerfit, n.sims = 1000) # 1\nfs <- fixef(sims) # 2\nnewavg <- data.frame(Days = 0:9)\nXmat <- model.matrix(~ 1 + Days, data = newavg) # 3\nfitmat <- matrix(ncol = nrow(fs), nrow = nrow(newavg)) # 4\nfor (i in 1:nrow(fs)) {\n  fitmat[, i] <- Xmat %*% as.matrix(fs)[i, ]\n} # 5\nnewavg$lower <- apply(fitmat, 1, quantile, prob = 0.05) # 6\nnewavg$median <- apply(fitmat, 1, quantile, prob = 0.5) # 6\nnewavg$upper <- apply(fitmat, 1, quantile, prob = 0.95) # 6\np1 + geom_line(data = newavg, aes(y = median), size = 1) +\n  geom_line(data = newavg, aes(y = lower), lty = 2) +\n  geom_line(data = newavg, aes(y = upper), lty = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/sim_lmer-1.png){fig-align='center' width=432}\n:::\n:::\n\nAgain, the multilevel model's average regression line and the fixed effect model's regression line are identical, but the former has a wider confidence interval (black dashed lines.)\n\nThe code snippet generalizes well to be used with any two matrices where one contains predictor values (the combinations of predictor values on which you want to predict) and the other samples of parameter values, such as a posterior distribution from a Bayesian model, as we'll see below.\nThis procedure is described in @korner-nievergeltBayesianDataAnalysis2015, who give a detailed explanation of the code and on drawing inference from the results.\n\n### CIs using arm: Individual level\n\nThe `fitted()` function in arm returns fitted values at the varying effects level automatically, so we can skip a few lines of code from above to obtain confidence intervals at the individual-level:\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/plot_lmer_vary_c47d0020b85ec8172db56c531485a5a2'}\n\n```{.r .cell-code}\nyhat <- fitted(sims, lmerfit)\nsleepstudy$lower <- apply(yhat, 1, quantile, prob = 0.025)\nsleepstudy$median <- apply(yhat, 1, quantile, prob = 0.5)\nsleepstudy$upper <- apply(yhat, 1, quantile, prob = 0.975)\np2 + geom_line(data = sleepstudy, aes(y = median), size = 1) +\n  geom_line(data = sleepstudy, aes(y = lower), lty = 2) +\n  geom_line(data = sleepstudy, aes(y = upper), lty = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot_lmer_vary-1.png){fig-align='center' width=672}\n:::\n:::\n\nA subset of individuals highlights the most interesting differences between the models:\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/plot_lmer_vary_id9_3236d149fa262c4f31664b8d2e135b23'}\n\n```{.r .cell-code}\ntmp <- filter(sleepstudy, Subject %in% unique(sleepstudy$Subject)[c(6, 9)])\np2 %+% tmp +\n  geom_line(data = tmp, aes(y = median), size = 1) +\n  geom_line(data = tmp, aes(y = lower), lty = 2) +\n  geom_line(data = tmp, aes(y = upper), lty = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot_lmer_vary_id9-1.png){fig-align='center' width=432}\n:::\n:::\n\nIn the top panel, the unique fixed effects model's confidence band is much wider than the confidence band from the multilevel model, highlighting the pooling of information in the latter model. Similarly, the bottom panel (individual 9 discussed above) shows that 95% plausible regression lines for that individual now include lines that increase as a function of days of sleep deprivation, and indeed the expected regression line for this individual is nearly a flat line.\n\nIn the next sections, we'll apply this method of obtaining regression line confidence intervals for multilevel models estimated with Bayesian methods. \n\n## Intervals from Bayesian models\n\nConfidence intervals are commonly called credible intervals in the Bayesian context, but I'll use these terms interchangeably. The reader should be aware that, unlike traditional confidence intervals, credible intervals actually allow statements about credibility. In fact, being allowed to say the things we usually mean when discussing confidence intervals is one of many good reasons for applying bayesian statistics. \n\nI use brms to specify the model and sample from the posterior distribution.\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/fit_brms_ce72a9721a15de316778223bafa3e38d'}\n\n```{.r .cell-code}\nbrmfit <- brm(\n  data = sleepstudy,\n  Reaction ~ Days + (Days | Subject),\n  family = gaussian,\n  iter = 2000,\n  chains = 4,\n  file = \"sleepstudy\"\n)\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/printbrmfit_545a213d0e691b63d585a7677a1ed8dd'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n<caption>Bayesian model estimates (brms)</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\">   </th>\n   <th style=\"text-align:right;\"> Estimate </th>\n   <th style=\"text-align:right;\"> Est.Error </th>\n   <th style=\"text-align:right;\"> l-95% CI </th>\n   <th style=\"text-align:right;\"> u-95% CI </th>\n   <th style=\"text-align:right;\"> Tail_ESS </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Intercept </td>\n   <td style=\"text-align:right;\"> 250.96 </td>\n   <td style=\"text-align:right;\"> 7.64 </td>\n   <td style=\"text-align:right;\"> 235.59 </td>\n   <td style=\"text-align:right;\"> 265.13 </td>\n   <td style=\"text-align:right;\"> 1558.74 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Days </td>\n   <td style=\"text-align:right;\"> 10.46 </td>\n   <td style=\"text-align:right;\"> 1.86 </td>\n   <td style=\"text-align:right;\"> 7.07 </td>\n   <td style=\"text-align:right;\"> 13.95 </td>\n   <td style=\"text-align:right;\"> 1391.49 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> sd(Intercept) </td>\n   <td style=\"text-align:right;\"> 26.82 </td>\n   <td style=\"text-align:right;\"> 7.16 </td>\n   <td style=\"text-align:right;\"> 15.29 </td>\n   <td style=\"text-align:right;\"> 42.38 </td>\n   <td style=\"text-align:right;\"> 1715.64 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> sd(Days) </td>\n   <td style=\"text-align:right;\"> 6.61 </td>\n   <td style=\"text-align:right;\"> 1.57 </td>\n   <td style=\"text-align:right;\"> 4.19 </td>\n   <td style=\"text-align:right;\"> 10.16 </td>\n   <td style=\"text-align:right;\"> 1609.65 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> cor(Intercept,Days) </td>\n   <td style=\"text-align:right;\"> 0.10 </td>\n   <td style=\"text-align:right;\"> 0.30 </td>\n   <td style=\"text-align:right;\"> -0.46 </td>\n   <td style=\"text-align:right;\"> 0.70 </td>\n   <td style=\"text-align:right;\"> 1674.70 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\nNote that now we also have values for the uncertainties associated with the varying effect parameters, without additional code.\n\n#### Average regression line & CI\n\nbrms has a function for obtaining fitted values (`fitted()`) and their associated upper and lower bounds, which together constitute the regression line and its confidence interval.\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/plot_brm_avg_84f4a41bc5a44ff1852d725af2df4164'}\n\n```{.r .cell-code}\nnewavg <- data.frame(Days = 0:9)\nfitavg <- cbind(\n  newavg, \n  fitted(brmfit, newdata = newavg, re_formula = NA)[, -2]\n  )\np3 <- p1 +\n  geom_line(data = fitavg, aes(y = Estimate), col = \"black\", size = 1) +\n  geom_line(data = fitavg, aes(y = Q2.5), col = \"black\", lty = 2) +\n  geom_line(data = fitavg, aes(y = Q97.5), col = \"black\", lty = 2)\np3\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot_brm_avg-1.png){fig-align='center' width=432}\n:::\n:::\n\nThe average effects' estimates in this model have higher uncertainty than in the `lmerfit` model above, explaining why the average regression line's CI is also wider.\n\n#### Alternative to CIs\n\nInstead of showing summaries of the samples from the posterior distribution, one could also plot the entire distribution--at the risk of overplotting. Overplotting can be avoided by adjusting each regression line's transparency with the `alpha` parameter, resulting in a visually attractive--maybe?--display of the uncertainty in the regression line:\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-1_fd71379dca8887cc23ba29c07cc664ec'}\n\n```{.r .cell-code}\npst <- posterior_samples(brmfit, \"b\")\nggplot(sleepstudy, aes(x = Days, y = Reaction)) +\n  geom_point(shape = 1) +\n  geom_abline(\n    data = pst, alpha = .01, size = .4,\n    aes(intercept = b_Intercept, slope = b_Days)\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){fig-align='center' width=672}\n:::\n:::\n\n#### Varying regression lines & CIs\n\nThe best part is, brms' `fitted()` also gives regression lines with CIs at the individual level.\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/plot_brm_vary_eb6ff23721ab439beb9e0fa6a059b3e5'}\n\n```{.r .cell-code}\nX <- cbind(sleepstudy[, 1:3], fitted(brmfit)[, -2]) %>% as_tibble()\np2 + geom_line(data = X, aes(y = Estimate), size = 1) +\n  geom_line(data = X, aes(y = Q2.5), lty = 2) +\n  geom_line(data = X, aes(y = Q97.5), lty = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot_brm_vary-1.png){fig-align='center' width=672}\n:::\n:::\n\nWorking with brms makes it very easy to obtain CIs for regression lines at both levels of analysis.\n\n### An alternative visualization\n\nIt might be useful, especially for model checking purposes, to display not only the fitted values, but also what the model predicts. To display the 95% prediction interval, I use the same procedure, but replace `fitted()` with `predict()`:\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-2_1abd26b1524d35921cf63bc6d8858e52'}\n\n```{.r .cell-code}\nnewavg <- data.frame(Days = 0:9)\npredavg <- cbind(\n  newavg, \n  predict(brmfit, newdata = newavg, re_formula = NA)[, -2]\n  )\nnames(predavg) <- c(\"Days\", \"Reaction\", \"lower\", \"upper\")\np3 + geom_ribbon(\n  data = predavg, \n  aes(ymin = lower, ymax = upper),\n  col = NA, alpha = .2\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=672}\n:::\n:::\n\n### One-liners\n\nbrms also has a function `conditional_effects()` that makes drawing these plots easy. Here is how to draw the average effect (first), and subject-specific effects (latter).\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-3_a9762d5baf5fcb0084d4494d9ecdc556'}\n\n```{.r .cell-code}\nconditional_effects(brmfit)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\nconditional_effects(\n  brmfit, \n  conditions = distinct(sleepstudy, Subject), \n  re_formula = NULL\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-2.png){fig-align='center' width=672}\n:::\n:::\n\n## Conclusion\n\nWorking with a matrix of plausible parameter values makes it easier to draw regression lines with confidence intervals. Specifically, the brms package provides easy access to CIs in a multilevel modeling context. \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}